
F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080029ec  080029ec  000039ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a50  08002a50  00004064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002a50  08002a50  00004064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002a50  08002a50  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a50  08002a50  00003a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a54  08002a54  00003a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08002a58  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000064  08002abc  00004064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08002abc  00004214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c73  00000000  00000000  0000408d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9f  00000000  00000000  00009d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0000b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000056a  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ea3  00000000  00000000  0000c57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c18c  00000000  00000000  0002441d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e20  00000000  00000000  000305a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b23c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002010  00000000  00000000  000b240c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b441c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080029d4 	.word	0x080029d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080029d4 	.word	0x080029d4

0800014c <apInit>:
//extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
//extern HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);


void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART2, 115200);
 8000150:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fa13 	bl	8000580 <uartOpen>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
	...

08000160 <apMain>:

void apMain(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
	uint32_t pre_time = 0;
 8000166:	2300      	movs	r3, #0
 8000168:	607b      	str	r3, [r7, #4]

	while(1)
	{
		if (millis() - pre_time >= 500)
 800016a:	f000 f839 	bl	80001e0 <millis>
 800016e:	4602      	mov	r2, r0
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1ad3      	subs	r3, r2, r3
 8000174:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000178:	d3f7      	bcc.n	800016a <apMain+0xa>
		{
			pre_time = millis();
 800017a:	f000 f831 	bl	80001e0 <millis>
 800017e:	6078      	str	r0, [r7, #4]
			ledToggle(_DEF_LED1);
 8000180:	2000      	movs	r0, #0
 8000182:	f000 f9c5 	bl	8000510 <ledToggle>
			uartPrintf(_DEF_UART2, "test\r\n");
 8000186:	4902      	ldr	r1, [pc, #8]	@ (8000190 <apMain+0x30>)
 8000188:	2000      	movs	r0, #0
 800018a:	f000 fa61 	bl	8000650 <uartPrintf>
		if (millis() - pre_time >= 500)
 800018e:	e7ec      	b.n	800016a <apMain+0xa>
 8000190:	080029ec 	.word	0x080029ec

08000194 <bspInit>:
//#include "usb_device.h"

void SystemClock_Config(void);

void bspInit(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
	HAL_Init();
 800019a:	f000 faed 	bl	8000778 <HAL_Init>
	SystemClock_Config();
 800019e:	f000 f826 	bl	80001ee <SystemClock_Config>

	__HAL_RCC_GPIOD_CLK_ENABLE();
 80001a2:	4b0e      	ldr	r3, [pc, #56]	@ (80001dc <bspInit+0x48>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	4a0d      	ldr	r2, [pc, #52]	@ (80001dc <bspInit+0x48>)
 80001a8:	f043 0320 	orr.w	r3, r3, #32
 80001ac:	6193      	str	r3, [r2, #24]
 80001ae:	4b0b      	ldr	r3, [pc, #44]	@ (80001dc <bspInit+0x48>)
 80001b0:	699b      	ldr	r3, [r3, #24]
 80001b2:	f003 0320 	and.w	r3, r3, #32
 80001b6:	607b      	str	r3, [r7, #4]
 80001b8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80001ba:	4b08      	ldr	r3, [pc, #32]	@ (80001dc <bspInit+0x48>)
 80001bc:	699b      	ldr	r3, [r3, #24]
 80001be:	4a07      	ldr	r2, [pc, #28]	@ (80001dc <bspInit+0x48>)
 80001c0:	f043 0304 	orr.w	r3, r3, #4
 80001c4:	6193      	str	r3, [r2, #24]
 80001c6:	4b05      	ldr	r3, [pc, #20]	@ (80001dc <bspInit+0x48>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	f003 0304 	and.w	r3, r3, #4
 80001ce:	603b      	str	r3, [r7, #0]
 80001d0:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
*/
	//MX_USB_DEVICE_Init();
	//MX_USART2_UART_Init();
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	40021000 	.word	0x40021000

080001e0 <millis>:
{
	HAL_Delay(ms);
}

uint32_t millis(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80001e4:	f000 fb20 	bl	8000828 <HAL_GetTick>
 80001e8:	4603      	mov	r3, r0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}

080001ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b094      	sub	sp, #80	@ 0x50
 80001f2:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001f8:	2228      	movs	r2, #40	@ 0x28
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 ff5b 	bl	80020b8 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000202:	f107 0314 	add.w	r3, r7, #20
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021e:	2301      	movs	r3, #1
 8000220:	62bb      	str	r3, [r7, #40]	@ 0x28
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000222:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000226:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	633b      	str	r3, [r7, #48]	@ 0x30
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	63bb      	str	r3, [r7, #56]	@ 0x38
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	647b      	str	r3, [r7, #68]	@ 0x44
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000234:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000238:	64bb      	str	r3, [r7, #72]	@ 0x48
	  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800023e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fe33 	bl	8000eb0 <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x66>
	  {
	    Error_Handler();
 8000250:	f000 f827 	bl	80002a2 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	617b      	str	r3, [r7, #20]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000258:	2302      	movs	r3, #2
 800025a:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	61fb      	str	r3, [r7, #28]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000260:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000264:	623b      	str	r3, [r7, #32]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	627b      	str	r3, [r7, #36]	@ 0x24

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2102      	movs	r1, #2
 8000270:	4618      	mov	r0, r3
 8000272:	f001 f89f 	bl	80013b4 <HAL_RCC_ClockConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x92>
	  {
	    Error_Handler();
 800027c:	f000 f811 	bl	80002a2 <Error_Handler>
	  }
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000280:	2310      	movs	r3, #16
 8000282:	607b      	str	r3, [r7, #4]
	  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000284:	2300      	movs	r3, #0
 8000286:	613b      	str	r3, [r7, #16]
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fa2a 	bl	80016e4 <HAL_RCCEx_PeriphCLKConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0xac>
	  {
	    Error_Handler();
 8000296:	f000 f804 	bl	80002a2 <Error_Handler>
	  }
}
 800029a:	bf00      	nop
 800029c:	3750      	adds	r7, #80	@ 0x50
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002a2:	b480      	push	{r7}
 80002a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002a6:	b672      	cpsid	i
}
 80002a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002aa:	bf00      	nop
 80002ac:	e7fd      	b.n	80002aa <Error_Handler+0x8>
	...

080002b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002b6:	4b15      	ldr	r3, [pc, #84]	@ (800030c <HAL_MspInit+0x5c>)
 80002b8:	699b      	ldr	r3, [r3, #24]
 80002ba:	4a14      	ldr	r2, [pc, #80]	@ (800030c <HAL_MspInit+0x5c>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6193      	str	r3, [r2, #24]
 80002c2:	4b12      	ldr	r3, [pc, #72]	@ (800030c <HAL_MspInit+0x5c>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	60bb      	str	r3, [r7, #8]
 80002cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ce:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <HAL_MspInit+0x5c>)
 80002d0:	69db      	ldr	r3, [r3, #28]
 80002d2:	4a0e      	ldr	r2, [pc, #56]	@ (800030c <HAL_MspInit+0x5c>)
 80002d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002d8:	61d3      	str	r3, [r2, #28]
 80002da:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <HAL_MspInit+0x5c>)
 80002dc:	69db      	ldr	r3, [r3, #28]
 80002de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000310 <HAL_MspInit+0x60>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <HAL_MspInit+0x60>)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000302:	bf00      	nop
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	40021000 	.word	0x40021000
 8000310:	40010000 	.word	0x40010000

08000314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000318:	bf00      	nop
 800031a:	e7fd      	b.n	8000318 <NMI_Handler+0x4>

0800031c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <HardFault_Handler+0x4>

08000324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000328:	bf00      	nop
 800032a:	e7fd      	b.n	8000328 <MemManage_Handler+0x4>

0800032c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <BusFault_Handler+0x4>

08000334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <UsageFault_Handler+0x4>

0800033c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr

08000348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr

08000360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000364:	f000 fa4e 	bl	8000804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000370:	4802      	ldr	r0, [pc, #8]	@ (800037c <USART2_IRQHandler+0x10>)
 8000372:	f001 fb4d 	bl	8001a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000088 	.word	0x20000088

08000380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000388:	4a14      	ldr	r2, [pc, #80]	@ (80003dc <_sbrk+0x5c>)
 800038a:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <_sbrk+0x60>)
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000394:	4b13      	ldr	r3, [pc, #76]	@ (80003e4 <_sbrk+0x64>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d102      	bne.n	80003a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800039c:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <_sbrk+0x64>)
 800039e:	4a12      	ldr	r2, [pc, #72]	@ (80003e8 <_sbrk+0x68>)
 80003a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003a2:	4b10      	ldr	r3, [pc, #64]	@ (80003e4 <_sbrk+0x64>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4413      	add	r3, r2
 80003aa:	693a      	ldr	r2, [r7, #16]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d207      	bcs.n	80003c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003b0:	f001 fe8a 	bl	80020c8 <__errno>
 80003b4:	4603      	mov	r3, r0
 80003b6:	220c      	movs	r2, #12
 80003b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ba:	f04f 33ff 	mov.w	r3, #4294967295
 80003be:	e009      	b.n	80003d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003c0:	4b08      	ldr	r3, [pc, #32]	@ (80003e4 <_sbrk+0x64>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003c6:	4b07      	ldr	r3, [pc, #28]	@ (80003e4 <_sbrk+0x64>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4413      	add	r3, r2
 80003ce:	4a05      	ldr	r2, [pc, #20]	@ (80003e4 <_sbrk+0x64>)
 80003d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003d2:	68fb      	ldr	r3, [r7, #12]
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	3718      	adds	r7, #24
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20005000 	.word	0x20005000
 80003e0:	00000400 	.word	0x00000400
 80003e4:	20000080 	.word	0x20000080
 80003e8:	20000218 	.word	0x20000218

080003ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80003f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80003fa:	e003      	b.n	8000404 <LoopCopyDataInit>

080003fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80003fc:	4b0b      	ldr	r3, [pc, #44]	@ (800042c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80003fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000400:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000402:	3104      	adds	r1, #4

08000404 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000404:	480a      	ldr	r0, [pc, #40]	@ (8000430 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000406:	4b0b      	ldr	r3, [pc, #44]	@ (8000434 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000408:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800040a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800040c:	d3f6      	bcc.n	80003fc <CopyDataInit>
  ldr r2, =_sbss
 800040e:	4a0a      	ldr	r2, [pc, #40]	@ (8000438 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000410:	e002      	b.n	8000418 <LoopFillZerobss>

08000412 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000414:	f842 3b04 	str.w	r3, [r2], #4

08000418 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000418:	4b08      	ldr	r3, [pc, #32]	@ (800043c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800041a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800041c:	d3f9      	bcc.n	8000412 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800041e:	f7ff ffe5 	bl	80003ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000422:	f001 fe57 	bl	80020d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f001 fdff 	bl	8002028 <main>
  bx lr
 800042a:	4770      	bx	lr
  ldr r3, =_sidata
 800042c:	08002a58 	.word	0x08002a58
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000434:	20000064 	.word	0x20000064
  ldr r2, =_sbss
 8000438:	20000064 	.word	0x20000064
  ldr r3, = _ebss
 800043c:	20000214 	.word	0x20000214

08000440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000440:	e7fe      	b.n	8000440 <ADC1_2_IRQHandler>
	...

08000444 <ledInit>:
}led_tbl_t;

led_tbl_t led_tbl[LED_MAX_CH] = {{GPIOA, GPIO_PIN_5, GPIO_PIN_SET, GPIO_PIN_RESET}};

bool ledInit(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
	bool ret = true;
 800044a:	2301      	movs	r3, #1
 800044c:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0308 	add.w	r3, r7, #8
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	//__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b1a      	ldr	r3, [pc, #104]	@ (80004c8 <ledInit+0x84>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a19      	ldr	r2, [pc, #100]	@ (80004c8 <ledInit+0x84>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b17      	ldr	r3, [pc, #92]	@ (80004c8 <ledInit+0x84>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
	/*Configure GPIO pin Output Level */
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

	/*Configure GPIO pin : PA5 */
	//GPIO_InitStruct.Pin = GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000474:	2301      	movs	r3, #1
 8000476:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047c:	2302      	movs	r3, #2
 800047e:	617b      	str	r3, [r7, #20]
	//HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


	for (int i = 0; i < LED_MAX_CH; i++) 
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
 8000484:	e017      	b.n	80004b6 <ledInit+0x72>
	{
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000486:	4a11      	ldr	r2, [pc, #68]	@ (80004cc <ledInit+0x88>)
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	00db      	lsls	r3, r3, #3
 800048c:	4413      	add	r3, r2
 800048e:	889b      	ldrh	r3, [r3, #4]
 8000490:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000492:	4a0e      	ldr	r2, [pc, #56]	@ (80004cc <ledInit+0x88>)
 8000494:	69fb      	ldr	r3, [r7, #28]
 8000496:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800049a:	f107 0208 	add.w	r2, r7, #8
 800049e:	4611      	mov	r1, r2
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fb4f 	bl	8000b44 <HAL_GPIO_Init>

		ledOff(i);
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f810 	bl	80004d0 <ledOff>
	for (int i = 0; i < LED_MAX_CH; i++) 
 80004b0:	69fb      	ldr	r3, [r7, #28]
 80004b2:	3301      	adds	r3, #1
 80004b4:	61fb      	str	r3, [r7, #28]
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	dde4      	ble.n	8000486 <ledInit+0x42>
	}

	return ret;
 80004bc:	7efb      	ldrb	r3, [r7, #27]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	20000004 	.word	0x20000004

080004d0 <ledOff>:
	if (ch >= LED_MAX_CH) return;
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	if (ch >= LED_MAX_CH) return;
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d111      	bne.n	8000504 <ledOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	4a0a      	ldr	r2, [pc, #40]	@ (800050c <ledOff+0x3c>)
 80004e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	4a08      	ldr	r2, [pc, #32]	@ (800050c <ledOff+0x3c>)
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	4413      	add	r3, r2
 80004f0:	8899      	ldrh	r1, [r3, #4]
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	4a05      	ldr	r2, [pc, #20]	@ (800050c <ledOff+0x3c>)
 80004f6:	00db      	lsls	r3, r3, #3
 80004f8:	4413      	add	r3, r2
 80004fa:	79db      	ldrb	r3, [r3, #7]
 80004fc:	461a      	mov	r2, r3
 80004fe:	f000 fca5 	bl	8000e4c <HAL_GPIO_WritePin>
 8000502:	e000      	b.n	8000506 <ledOff+0x36>
	if (ch >= LED_MAX_CH) return;
 8000504:	bf00      	nop

}
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000004 	.word	0x20000004

08000510 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	if (ch >= LED_MAX_CH) return;
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d10d      	bne.n	800053c <ledToggle+0x2c>
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	4a08      	ldr	r2, [pc, #32]	@ (8000544 <ledToggle+0x34>)
 8000524:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4906      	ldr	r1, [pc, #24]	@ (8000544 <ledToggle+0x34>)
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	440b      	add	r3, r1
 8000530:	889b      	ldrh	r3, [r3, #4]
 8000532:	4619      	mov	r1, r3
 8000534:	4610      	mov	r0, r2
 8000536:	f000 fca1 	bl	8000e7c <HAL_GPIO_TogglePin>
 800053a:	e000      	b.n	800053e <ledToggle+0x2e>
	if (ch >= LED_MAX_CH) return;
 800053c:	bf00      	nop
}
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000004 	.word	0x20000004

08000548 <uartInit>:

UART_HandleTypeDef huart2;


bool uartInit()
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
	bool ret = true;
 800054e:	2301      	movs	r3, #1
 8000550:	70fb      	strb	r3, [r7, #3]

	for (int i = 0; i < UART_MAX_CH; i++) 
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	e007      	b.n	8000568 <uartInit+0x20>
	{
		is_open[i] = false;
 8000558:	4a08      	ldr	r2, [pc, #32]	@ (800057c <uartInit+0x34>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < UART_MAX_CH; i++) 
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b00      	cmp	r3, #0
 800056c:	ddf4      	ble.n	8000558 <uartInit+0x10>
	}

	return ret;
 800056e:	78fb      	ldrb	r3, [r7, #3]
}
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000084 	.word	0x20000084

08000580 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	6039      	str	r1, [r7, #0]
 800058a:	71fb      	strb	r3, [r7, #7]
	bool ret = true;
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d127      	bne.n	80005e6 <uartOpen+0x66>
	{
		case _DEF_UART2:
			huart2.Instance 			= USART2;
 8000596:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <uartOpen+0x78>)
 8000598:	4a18      	ldr	r2, [pc, #96]	@ (80005fc <uartOpen+0x7c>)
 800059a:	601a      	str	r2, [r3, #0]
			huart2.Init.BaudRate		= baud;
 800059c:	4a16      	ldr	r2, [pc, #88]	@ (80005f8 <uartOpen+0x78>)
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	6053      	str	r3, [r2, #4]
			huart2.Init.WordLength 		= UART_WORDLENGTH_8B;
 80005a2:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <uartOpen+0x78>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
			huart2.Init.StopBits 		= UART_STOPBITS_1;
 80005a8:	4b13      	ldr	r3, [pc, #76]	@ (80005f8 <uartOpen+0x78>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
			huart2.Init.Parity 			= UART_PARITY_NONE;
 80005ae:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <uartOpen+0x78>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
			huart2.Init.Mode 			= UART_MODE_TX_RX;
 80005b4:	4b10      	ldr	r3, [pc, #64]	@ (80005f8 <uartOpen+0x78>)
 80005b6:	220c      	movs	r2, #12
 80005b8:	615a      	str	r2, [r3, #20]
			huart2.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <uartOpen+0x78>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
			huart2.Init.OverSampling 	= UART_OVERSAMPLING_16;
 80005c0:	4b0d      	ldr	r3, [pc, #52]	@ (80005f8 <uartOpen+0x78>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
			if (HAL_UART_Init(&huart2) != HAL_OK)
 80005c6:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <uartOpen+0x78>)
 80005c8:	f001 f942 	bl	8001850 <HAL_UART_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <uartOpen+0x58>
			{
				ret = false;
 80005d2:	2300      	movs	r3, #0
 80005d4:	73fb      	strb	r3, [r7, #15]
			else
			{
				ret = true;
				is_open[ch] = true;
			}
			break;
 80005d6:	e009      	b.n	80005ec <uartOpen+0x6c>
				ret = true;
 80005d8:	2301      	movs	r3, #1
 80005da:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	4a08      	ldr	r2, [pc, #32]	@ (8000600 <uartOpen+0x80>)
 80005e0:	2101      	movs	r1, #1
 80005e2:	54d1      	strb	r1, [r2, r3]
			break;
 80005e4:	e002      	b.n	80005ec <uartOpen+0x6c>
		default:
			ret = false;
 80005e6:	2300      	movs	r3, #0
 80005e8:	73fb      	strb	r3, [r7, #15]
			break;
 80005ea:	bf00      	nop
	}

	return ret;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000088 	.word	0x20000088
 80005fc:	40004400 	.word	0x40004400
 8000600:	20000084 	.word	0x20000084

08000604 <uartWrite>:
{

}

uint32_t uartWrite(uint8_t ch, uint8_t *p_buf, uint32_t length)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	73fb      	strb	r3, [r7, #15]
	uint32_t ret = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef  status;

	switch(ch)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d10e      	bne.n	800063a <uartWrite+0x36>
	{
		case _DEF_UART2:
			status = HAL_UART_Transmit(&huart2, p_buf, length, 100);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	b29a      	uxth	r2, r3
 8000620:	2364      	movs	r3, #100	@ 0x64
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	4809      	ldr	r0, [pc, #36]	@ (800064c <uartWrite+0x48>)
 8000626:	f001 f960 	bl	80018ea <HAL_UART_Transmit>
 800062a:	4603      	mov	r3, r0
 800062c:	74fb      	strb	r3, [r7, #19]
			if (status == HAL_OK)
 800062e:	7cfb      	ldrb	r3, [r7, #19]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d105      	bne.n	8000640 <uartWrite+0x3c>
			{
				ret = length;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	617b      	str	r3, [r7, #20]
			}
			break;
 8000638:	e002      	b.n	8000640 <uartWrite+0x3c>
		default:
			ret = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
			break;
 800063e:	e000      	b.n	8000642 <uartWrite+0x3e>
			break;
 8000640:	bf00      	nop
	}

	return ret;
 8000642:	697b      	ldr	r3, [r7, #20]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000088 	.word	0x20000088

08000650 <uartPrintf>:




uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8000650:	b40e      	push	{r1, r2, r3}
 8000652:	b580      	push	{r7, lr}
 8000654:	b0c7      	sub	sp, #284	@ 0x11c
 8000656:	af00      	add	r7, sp, #0
 8000658:	4602      	mov	r2, r0
 800065a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800065e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000662:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8000664:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000668:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800066c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000670:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8000672:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000676:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800067a:	f107 0010 	add.w	r0, r7, #16
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000684:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000688:	f001 fd08 	bl	800209c <vsniprintf>
 800068c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8000690:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000694:	f107 0110 	add.w	r1, r7, #16
 8000698:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800069c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ffae 	bl	8000604 <uartWrite>
 80006a8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 80006ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80006b6:	46bd      	mov	sp, r7
 80006b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006bc:	b003      	add	sp, #12
 80006be:	4770      	bx	lr

080006c0 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a1f      	ldr	r2, [pc, #124]	@ (8000758 <HAL_UART_MspInit+0x98>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d137      	bne.n	8000750 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e0:	4b1e      	ldr	r3, [pc, #120]	@ (800075c <HAL_UART_MspInit+0x9c>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	4a1d      	ldr	r2, [pc, #116]	@ (800075c <HAL_UART_MspInit+0x9c>)
 80006e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ea:	61d3      	str	r3, [r2, #28]
 80006ec:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <HAL_UART_MspInit+0x9c>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b18      	ldr	r3, [pc, #96]	@ (800075c <HAL_UART_MspInit+0x9c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a17      	ldr	r2, [pc, #92]	@ (800075c <HAL_UART_MspInit+0x9c>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b15      	ldr	r3, [pc, #84]	@ (800075c <HAL_UART_MspInit+0x9c>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000710:	2304      	movs	r3, #4
 8000712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	480f      	ldr	r0, [pc, #60]	@ (8000760 <HAL_UART_MspInit+0xa0>)
 8000724:	f000 fa0e 	bl	8000b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000728:	2308      	movs	r3, #8
 800072a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	4809      	ldr	r0, [pc, #36]	@ (8000760 <HAL_UART_MspInit+0xa0>)
 800073c:	f000 fa02 	bl	8000b44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2026      	movs	r0, #38	@ 0x26
 8000746:	f000 f950 	bl	80009ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800074a:	2026      	movs	r0, #38	@ 0x26
 800074c:	f000 f969 	bl	8000a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40004400 	.word	0x40004400
 800075c:	40021000 	.word	0x40021000
 8000760:	40010800 	.word	0x40010800

08000764 <hwInit>:
 */

#include "hw.h"

void hwInit(void) 
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	bspInit();
 8000768:	f7ff fd14 	bl	8000194 <bspInit>

	ledInit();
 800076c:	f7ff fe6a 	bl	8000444 <ledInit>

	uartInit();
 8000770:	f7ff feea 	bl	8000548 <uartInit>
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <HAL_Init+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	@ (80007a0 <HAL_Init+0x28>)
 8000782:	f043 0310 	orr.w	r3, r3, #16
 8000786:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f923 	bl	80009d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078e:	200f      	movs	r0, #15
 8000790:	f000 f808 	bl	80007a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000794:	f7ff fd8c 	bl	80002b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40022000 	.word	0x40022000

080007a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_InitTick+0x54>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <HAL_InitTick+0x58>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f93b 	bl	8000a3e <HAL_SYSTICK_Config>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00e      	b.n	80007f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d80a      	bhi.n	80007ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d8:	2200      	movs	r2, #0
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f000 f903 	bl	80009ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4a06      	ldr	r2, [pc, #24]	@ (8000800 <HAL_InitTick+0x5c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000010 	.word	0x20000010
 8000800:	2000000c 	.word	0x2000000c

08000804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <HAL_IncTick+0x1c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <HAL_IncTick+0x20>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4413      	add	r3, r2
 8000814:	4a03      	ldr	r2, [pc, #12]	@ (8000824 <HAL_IncTick+0x20>)
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000010 	.word	0x20000010
 8000824:	200000c8 	.word	0x200000c8

08000828 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b02      	ldr	r3, [pc, #8]	@ (8000838 <HAL_GetTick+0x10>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	200000c8 	.word	0x200000c8

0800083c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000858:	4013      	ands	r3, r2
 800085a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800086c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086e:	4a04      	ldr	r2, [pc, #16]	@ (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	60d3      	str	r3, [r2, #12]
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000888:	4b04      	ldr	r3, [pc, #16]	@ (800089c <__NVIC_GetPriorityGrouping+0x18>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	f003 0307 	and.w	r3, r3, #7
}
 8000892:	4618      	mov	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	db0b      	blt.n	80008ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	f003 021f 	and.w	r2, r3, #31
 80008b8:	4906      	ldr	r1, [pc, #24]	@ (80008d4 <__NVIC_EnableIRQ+0x34>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	095b      	lsrs	r3, r3, #5
 80008c0:	2001      	movs	r0, #1
 80008c2:	fa00 f202 	lsl.w	r2, r0, r2
 80008c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	e000e100 	.word	0xe000e100

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	@ (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	@ (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	@ 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	@ 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009a0:	d301      	bcc.n	80009a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00f      	b.n	80009c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <SysTick_Config+0x40>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ae:	210f      	movs	r1, #15
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f7ff ff90 	bl	80008d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <SysTick_Config+0x40>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	@ (80009d0 <SysTick_Config+0x40>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff2d 	bl	800083c <__NVIC_SetPriorityGrouping>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009fc:	f7ff ff42 	bl	8000884 <__NVIC_GetPriorityGrouping>
 8000a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	6978      	ldr	r0, [r7, #20]
 8000a08:	f7ff ff90 	bl	800092c <NVIC_EncodePriority>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff5f 	bl	80008d8 <__NVIC_SetPriority>
}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff35 	bl	80008a0 <__NVIC_EnableIRQ>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ffa2 	bl	8000990 <SysTick_Config>
 8000a4c:	4603      	mov	r3, r0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d005      	beq.n	8000a7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2204      	movs	r2, #4
 8000a72:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
 8000a78:	e051      	b.n	8000b1e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f022 020e 	bic.w	r2, r2, #14
 8000a88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f022 0201 	bic.w	r2, r2, #1
 8000a98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a22      	ldr	r2, [pc, #136]	@ (8000b28 <HAL_DMA_Abort_IT+0xd0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d029      	beq.n	8000af8 <HAL_DMA_Abort_IT+0xa0>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a20      	ldr	r2, [pc, #128]	@ (8000b2c <HAL_DMA_Abort_IT+0xd4>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d022      	beq.n	8000af4 <HAL_DMA_Abort_IT+0x9c>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b30 <HAL_DMA_Abort_IT+0xd8>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d01a      	beq.n	8000aee <HAL_DMA_Abort_IT+0x96>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b34 <HAL_DMA_Abort_IT+0xdc>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d012      	beq.n	8000ae8 <HAL_DMA_Abort_IT+0x90>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b38 <HAL_DMA_Abort_IT+0xe0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d00a      	beq.n	8000ae2 <HAL_DMA_Abort_IT+0x8a>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b3c <HAL_DMA_Abort_IT+0xe4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d102      	bne.n	8000adc <HAL_DMA_Abort_IT+0x84>
 8000ad6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ada:	e00e      	b.n	8000afa <HAL_DMA_Abort_IT+0xa2>
 8000adc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ae0:	e00b      	b.n	8000afa <HAL_DMA_Abort_IT+0xa2>
 8000ae2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ae6:	e008      	b.n	8000afa <HAL_DMA_Abort_IT+0xa2>
 8000ae8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aec:	e005      	b.n	8000afa <HAL_DMA_Abort_IT+0xa2>
 8000aee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af2:	e002      	b.n	8000afa <HAL_DMA_Abort_IT+0xa2>
 8000af4:	2310      	movs	r3, #16
 8000af6:	e000      	b.n	8000afa <HAL_DMA_Abort_IT+0xa2>
 8000af8:	2301      	movs	r3, #1
 8000afa:	4a11      	ldr	r2, [pc, #68]	@ (8000b40 <HAL_DMA_Abort_IT+0xe8>)
 8000afc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2201      	movs	r2, #1
 8000b02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	4798      	blx	r3
    } 
  }
  return status;
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40020008 	.word	0x40020008
 8000b2c:	4002001c 	.word	0x4002001c
 8000b30:	40020030 	.word	0x40020030
 8000b34:	40020044 	.word	0x40020044
 8000b38:	40020058 	.word	0x40020058
 8000b3c:	4002006c 	.word	0x4002006c
 8000b40:	40020000 	.word	0x40020000

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b08b      	sub	sp, #44	@ 0x2c
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b56:	e169      	b.n	8000e2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	f040 8158 	bne.w	8000e26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	4a9a      	ldr	r2, [pc, #616]	@ (8000de4 <HAL_GPIO_Init+0x2a0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d05e      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000b80:	4a98      	ldr	r2, [pc, #608]	@ (8000de4 <HAL_GPIO_Init+0x2a0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d875      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000b86:	4a98      	ldr	r2, [pc, #608]	@ (8000de8 <HAL_GPIO_Init+0x2a4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d058      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000b8c:	4a96      	ldr	r2, [pc, #600]	@ (8000de8 <HAL_GPIO_Init+0x2a4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d86f      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000b92:	4a96      	ldr	r2, [pc, #600]	@ (8000dec <HAL_GPIO_Init+0x2a8>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d052      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000b98:	4a94      	ldr	r2, [pc, #592]	@ (8000dec <HAL_GPIO_Init+0x2a8>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d869      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000b9e:	4a94      	ldr	r2, [pc, #592]	@ (8000df0 <HAL_GPIO_Init+0x2ac>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d04c      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000ba4:	4a92      	ldr	r2, [pc, #584]	@ (8000df0 <HAL_GPIO_Init+0x2ac>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d863      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000baa:	4a92      	ldr	r2, [pc, #584]	@ (8000df4 <HAL_GPIO_Init+0x2b0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d046      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000bb0:	4a90      	ldr	r2, [pc, #576]	@ (8000df4 <HAL_GPIO_Init+0x2b0>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d85d      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000bb6:	2b12      	cmp	r3, #18
 8000bb8:	d82a      	bhi.n	8000c10 <HAL_GPIO_Init+0xcc>
 8000bba:	2b12      	cmp	r3, #18
 8000bbc:	d859      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000bc4 <HAL_GPIO_Init+0x80>)
 8000bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc4:	08000c3f 	.word	0x08000c3f
 8000bc8:	08000c19 	.word	0x08000c19
 8000bcc:	08000c2b 	.word	0x08000c2b
 8000bd0:	08000c6d 	.word	0x08000c6d
 8000bd4:	08000c73 	.word	0x08000c73
 8000bd8:	08000c73 	.word	0x08000c73
 8000bdc:	08000c73 	.word	0x08000c73
 8000be0:	08000c73 	.word	0x08000c73
 8000be4:	08000c73 	.word	0x08000c73
 8000be8:	08000c73 	.word	0x08000c73
 8000bec:	08000c73 	.word	0x08000c73
 8000bf0:	08000c73 	.word	0x08000c73
 8000bf4:	08000c73 	.word	0x08000c73
 8000bf8:	08000c73 	.word	0x08000c73
 8000bfc:	08000c73 	.word	0x08000c73
 8000c00:	08000c73 	.word	0x08000c73
 8000c04:	08000c73 	.word	0x08000c73
 8000c08:	08000c21 	.word	0x08000c21
 8000c0c:	08000c35 	.word	0x08000c35
 8000c10:	4a79      	ldr	r2, [pc, #484]	@ (8000df8 <HAL_GPIO_Init+0x2b4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d013      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c16:	e02c      	b.n	8000c72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	623b      	str	r3, [r7, #32]
          break;
 8000c1e:	e029      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	3304      	adds	r3, #4
 8000c26:	623b      	str	r3, [r7, #32]
          break;
 8000c28:	e024      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	3308      	adds	r3, #8
 8000c30:	623b      	str	r3, [r7, #32]
          break;
 8000c32:	e01f      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	330c      	adds	r3, #12
 8000c3a:	623b      	str	r3, [r7, #32]
          break;
 8000c3c:	e01a      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d102      	bne.n	8000c4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c46:	2304      	movs	r3, #4
 8000c48:	623b      	str	r3, [r7, #32]
          break;
 8000c4a:	e013      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d105      	bne.n	8000c60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c54:	2308      	movs	r3, #8
 8000c56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	611a      	str	r2, [r3, #16]
          break;
 8000c5e:	e009      	b.n	8000c74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c60:	2308      	movs	r3, #8
 8000c62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	615a      	str	r2, [r3, #20]
          break;
 8000c6a:	e003      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
          break;
 8000c70:	e000      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          break;
 8000c72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	2bff      	cmp	r3, #255	@ 0xff
 8000c78:	d801      	bhi.n	8000c7e <HAL_GPIO_Init+0x13a>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	e001      	b.n	8000c82 <HAL_GPIO_Init+0x13e>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3304      	adds	r3, #4
 8000c82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	2bff      	cmp	r3, #255	@ 0xff
 8000c88:	d802      	bhi.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	e002      	b.n	8000c96 <HAL_GPIO_Init+0x152>
 8000c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c92:	3b08      	subs	r3, #8
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	210f      	movs	r1, #15
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	6a39      	ldr	r1, [r7, #32]
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 80b1 	beq.w	8000e26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8000dfc <HAL_GPIO_Init+0x2b8>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a4c      	ldr	r2, [pc, #304]	@ (8000dfc <HAL_GPIO_Init+0x2b8>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	@ (8000dfc <HAL_GPIO_Init+0x2b8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cdc:	4a48      	ldr	r2, [pc, #288]	@ (8000e00 <HAL_GPIO_Init+0x2bc>)
 8000cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a40      	ldr	r2, [pc, #256]	@ (8000e04 <HAL_GPIO_Init+0x2c0>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d013      	beq.n	8000d30 <HAL_GPIO_Init+0x1ec>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e08 <HAL_GPIO_Init+0x2c4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d00d      	beq.n	8000d2c <HAL_GPIO_Init+0x1e8>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a3e      	ldr	r2, [pc, #248]	@ (8000e0c <HAL_GPIO_Init+0x2c8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d007      	beq.n	8000d28 <HAL_GPIO_Init+0x1e4>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e10 <HAL_GPIO_Init+0x2cc>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d101      	bne.n	8000d24 <HAL_GPIO_Init+0x1e0>
 8000d20:	2303      	movs	r3, #3
 8000d22:	e006      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d24:	2304      	movs	r3, #4
 8000d26:	e004      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d28:	2302      	movs	r3, #2
 8000d2a:	e002      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e000      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d30:	2300      	movs	r3, #0
 8000d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d34:	f002 0203 	and.w	r2, r2, #3
 8000d38:	0092      	lsls	r2, r2, #2
 8000d3a:	4093      	lsls	r3, r2
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d42:	492f      	ldr	r1, [pc, #188]	@ (8000e00 <HAL_GPIO_Init+0x2bc>)
 8000d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	3302      	adds	r3, #2
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d006      	beq.n	8000d6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	492c      	ldr	r1, [pc, #176]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	600b      	str	r3, [r1, #0]
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	4928      	ldr	r1, [pc, #160]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d84:	4b23      	ldr	r3, [pc, #140]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	4922      	ldr	r1, [pc, #136]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	604b      	str	r3, [r1, #4]
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d92:	4b20      	ldr	r3, [pc, #128]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	491e      	ldr	r1, [pc, #120]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d006      	beq.n	8000dba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dac:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	4918      	ldr	r1, [pc, #96]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	608b      	str	r3, [r1, #8]
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dba:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	4914      	ldr	r1, [pc, #80]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d021      	beq.n	8000e18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	490e      	ldr	r1, [pc, #56]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	60cb      	str	r3, [r1, #12]
 8000de0:	e021      	b.n	8000e26 <HAL_GPIO_Init+0x2e2>
 8000de2:	bf00      	nop
 8000de4:	10320000 	.word	0x10320000
 8000de8:	10310000 	.word	0x10310000
 8000dec:	10220000 	.word	0x10220000
 8000df0:	10210000 	.word	0x10210000
 8000df4:	10120000 	.word	0x10120000
 8000df8:	10110000 	.word	0x10110000
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010000 	.word	0x40010000
 8000e04:	40010800 	.word	0x40010800
 8000e08:	40010c00 	.word	0x40010c00
 8000e0c:	40011000 	.word	0x40011000
 8000e10:	40011400 	.word	0x40011400
 8000e14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <HAL_GPIO_Init+0x304>)
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	4909      	ldr	r1, [pc, #36]	@ (8000e48 <HAL_GPIO_Init+0x304>)
 8000e22:	4013      	ands	r3, r2
 8000e24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e28:	3301      	adds	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e32:	fa22 f303 	lsr.w	r3, r2, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f47f ae8e 	bne.w	8000b58 <HAL_GPIO_Init+0x14>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	372c      	adds	r7, #44	@ 0x2c
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e5c:	787b      	ldrb	r3, [r7, #1]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e68:	e003      	b.n	8000e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	041a      	lsls	r2, r3, #16
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	611a      	str	r2, [r3, #16]
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4013      	ands	r3, r2
 8000e94:	041a      	lsls	r2, r3, #16
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43d9      	mvns	r1, r3
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	611a      	str	r2, [r3, #16]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
	...

08000eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e272      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8087 	beq.w	8000fde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ed0:	4b92      	ldr	r3, [pc, #584]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d00c      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000edc:	4b8f      	ldr	r3, [pc, #572]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 030c 	and.w	r3, r3, #12
 8000ee4:	2b08      	cmp	r3, #8
 8000ee6:	d112      	bne.n	8000f0e <HAL_RCC_OscConfig+0x5e>
 8000ee8:	4b8c      	ldr	r3, [pc, #560]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ef4:	d10b      	bne.n	8000f0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef6:	4b89      	ldr	r3, [pc, #548]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d06c      	beq.n	8000fdc <HAL_RCC_OscConfig+0x12c>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d168      	bne.n	8000fdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e24c      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f16:	d106      	bne.n	8000f26 <HAL_RCC_OscConfig+0x76>
 8000f18:	4b80      	ldr	r3, [pc, #512]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a7f      	ldr	r2, [pc, #508]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	e02e      	b.n	8000f84 <HAL_RCC_OscConfig+0xd4>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x98>
 8000f2e:	4b7b      	ldr	r3, [pc, #492]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a7a      	ldr	r2, [pc, #488]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b78      	ldr	r3, [pc, #480]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a77      	ldr	r2, [pc, #476]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e01d      	b.n	8000f84 <HAL_RCC_OscConfig+0xd4>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0xbc>
 8000f52:	4b72      	ldr	r3, [pc, #456]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a71      	ldr	r2, [pc, #452]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	4b6f      	ldr	r3, [pc, #444]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a6e      	ldr	r2, [pc, #440]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e00b      	b.n	8000f84 <HAL_RCC_OscConfig+0xd4>
 8000f6c:	4b6b      	ldr	r3, [pc, #428]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a6a      	ldr	r2, [pc, #424]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b68      	ldr	r3, [pc, #416]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a67      	ldr	r2, [pc, #412]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d013      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fc4c 	bl	8000828 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fc48 	bl	8000828 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	@ 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e200      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0f0      	beq.n	8000f94 <HAL_RCC_OscConfig+0xe4>
 8000fb2:	e014      	b.n	8000fde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fc38 	bl	8000828 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fc34 	bl	8000828 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	@ 0x64
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e1ec      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fce:	4b53      	ldr	r3, [pc, #332]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f0      	bne.n	8000fbc <HAL_RCC_OscConfig+0x10c>
 8000fda:	e000      	b.n	8000fde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d063      	beq.n	80010b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fea:	4b4c      	ldr	r3, [pc, #304]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00b      	beq.n	800100e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ff6:	4b49      	ldr	r3, [pc, #292]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	d11c      	bne.n	800103c <HAL_RCC_OscConfig+0x18c>
 8001002:	4b46      	ldr	r3, [pc, #280]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d116      	bne.n	800103c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100e:	4b43      	ldr	r3, [pc, #268]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <HAL_RCC_OscConfig+0x176>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d001      	beq.n	8001026 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e1c0      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001026:	4b3d      	ldr	r3, [pc, #244]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4939      	ldr	r1, [pc, #228]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103a:	e03a      	b.n	80010b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d020      	beq.n	8001086 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001044:	4b36      	ldr	r3, [pc, #216]	@ (8001120 <HAL_RCC_OscConfig+0x270>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104a:	f7ff fbed 	bl	8000828 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001052:	f7ff fbe9 	bl	8000828 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e1a1      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001064:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f0      	beq.n	8001052 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001070:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4927      	ldr	r1, [pc, #156]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 8001080:	4313      	orrs	r3, r2
 8001082:	600b      	str	r3, [r1, #0]
 8001084:	e015      	b.n	80010b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001086:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <HAL_RCC_OscConfig+0x270>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fbcc 	bl	8000828 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001094:	f7ff fbc8 	bl	8000828 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e180      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d03a      	beq.n	8001134 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d019      	beq.n	80010fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c6:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <HAL_RCC_OscConfig+0x274>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010cc:	f7ff fbac 	bl	8000828 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d4:	f7ff fba8 	bl	8000828 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e160      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <HAL_RCC_OscConfig+0x26c>)
 80010e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010f2:	2001      	movs	r0, #1
 80010f4:	f000 fad8 	bl	80016a8 <RCC_Delay>
 80010f8:	e01c      	b.n	8001134 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <HAL_RCC_OscConfig+0x274>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001100:	f7ff fb92 	bl	8000828 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001106:	e00f      	b.n	8001128 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001108:	f7ff fb8e 	bl	8000828 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d908      	bls.n	8001128 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e146      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	42420000 	.word	0x42420000
 8001124:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001128:	4b92      	ldr	r3, [pc, #584]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1e9      	bne.n	8001108 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80a6 	beq.w	800128e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001146:	4b8b      	ldr	r3, [pc, #556]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10d      	bne.n	800116e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	4b88      	ldr	r3, [pc, #544]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4a87      	ldr	r2, [pc, #540]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115c:	61d3      	str	r3, [r2, #28]
 800115e:	4b85      	ldr	r3, [pc, #532]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800116a:	2301      	movs	r3, #1
 800116c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116e:	4b82      	ldr	r3, [pc, #520]	@ (8001378 <HAL_RCC_OscConfig+0x4c8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001176:	2b00      	cmp	r3, #0
 8001178:	d118      	bne.n	80011ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800117a:	4b7f      	ldr	r3, [pc, #508]	@ (8001378 <HAL_RCC_OscConfig+0x4c8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a7e      	ldr	r2, [pc, #504]	@ (8001378 <HAL_RCC_OscConfig+0x4c8>)
 8001180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001186:	f7ff fb4f 	bl	8000828 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800118e:	f7ff fb4b 	bl	8000828 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b64      	cmp	r3, #100	@ 0x64
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e103      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a0:	4b75      	ldr	r3, [pc, #468]	@ (8001378 <HAL_RCC_OscConfig+0x4c8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0f0      	beq.n	800118e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d106      	bne.n	80011c2 <HAL_RCC_OscConfig+0x312>
 80011b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6213      	str	r3, [r2, #32]
 80011c0:	e02d      	b.n	800121e <HAL_RCC_OscConfig+0x36e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x334>
 80011ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	4a69      	ldr	r2, [pc, #420]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	6213      	str	r3, [r2, #32]
 80011d6:	4b67      	ldr	r3, [pc, #412]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4a66      	ldr	r2, [pc, #408]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	f023 0304 	bic.w	r3, r3, #4
 80011e0:	6213      	str	r3, [r2, #32]
 80011e2:	e01c      	b.n	800121e <HAL_RCC_OscConfig+0x36e>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b05      	cmp	r3, #5
 80011ea:	d10c      	bne.n	8001206 <HAL_RCC_OscConfig+0x356>
 80011ec:	4b61      	ldr	r3, [pc, #388]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4a60      	ldr	r2, [pc, #384]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6213      	str	r3, [r2, #32]
 80011f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6213      	str	r3, [r2, #32]
 8001204:	e00b      	b.n	800121e <HAL_RCC_OscConfig+0x36e>
 8001206:	4b5b      	ldr	r3, [pc, #364]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	4a5a      	ldr	r2, [pc, #360]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	6213      	str	r3, [r2, #32]
 8001212:	4b58      	ldr	r3, [pc, #352]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	4a57      	ldr	r2, [pc, #348]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	f023 0304 	bic.w	r3, r3, #4
 800121c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d015      	beq.n	8001252 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001226:	f7ff faff 	bl	8000828 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122c:	e00a      	b.n	8001244 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800122e:	f7ff fafb 	bl	8000828 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800123c:	4293      	cmp	r3, r2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e0b1      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001244:	4b4b      	ldr	r3, [pc, #300]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0ee      	beq.n	800122e <HAL_RCC_OscConfig+0x37e>
 8001250:	e014      	b.n	800127c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001252:	f7ff fae9 	bl	8000828 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001258:	e00a      	b.n	8001270 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125a:	f7ff fae5 	bl	8000828 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001268:	4293      	cmp	r3, r2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e09b      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001270:	4b40      	ldr	r3, [pc, #256]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1ee      	bne.n	800125a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d105      	bne.n	800128e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001282:	4b3c      	ldr	r3, [pc, #240]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4a3b      	ldr	r2, [pc, #236]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800128c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 8087 	beq.w	80013a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001298:	4b36      	ldr	r3, [pc, #216]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d061      	beq.n	8001368 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d146      	bne.n	800133a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ac:	4b33      	ldr	r3, [pc, #204]	@ (800137c <HAL_RCC_OscConfig+0x4cc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b2:	f7ff fab9 	bl	8000828 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ba:	f7ff fab5 	bl	8000828 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e06d      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012cc:	4b29      	ldr	r3, [pc, #164]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f0      	bne.n	80012ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012e0:	d108      	bne.n	80012f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012e2:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	4921      	ldr	r1, [pc, #132]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a19      	ldr	r1, [r3, #32]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001304:	430b      	orrs	r3, r1
 8001306:	491b      	ldr	r1, [pc, #108]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800130c:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <HAL_RCC_OscConfig+0x4cc>)
 800130e:	2201      	movs	r2, #1
 8001310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fa89 	bl	8000828 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131a:	f7ff fa85 	bl	8000828 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e03d      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x46a>
 8001338:	e035      	b.n	80013a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <HAL_RCC_OscConfig+0x4cc>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fa72 	bl	8000828 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001348:	f7ff fa6e 	bl	8000828 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e026      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_RCC_OscConfig+0x4c4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x498>
 8001366:	e01e      	b.n	80013a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d107      	bne.n	8001380 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e019      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
 8001374:	40021000 	.word	0x40021000
 8001378:	40007000 	.word	0x40007000
 800137c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_RCC_OscConfig+0x500>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	429a      	cmp	r2, r3
 8001392:	d106      	bne.n	80013a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139e:	429a      	cmp	r2, r3
 80013a0:	d001      	beq.n	80013a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000

080013b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e0d0      	b.n	800156a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001574 <HAL_RCC_ClockConfig+0x1c0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d910      	bls.n	80013f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d6:	4b67      	ldr	r3, [pc, #412]	@ (8001574 <HAL_RCC_ClockConfig+0x1c0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 0207 	bic.w	r2, r3, #7
 80013de:	4965      	ldr	r1, [pc, #404]	@ (8001574 <HAL_RCC_ClockConfig+0x1c0>)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e6:	4b63      	ldr	r3, [pc, #396]	@ (8001574 <HAL_RCC_ClockConfig+0x1c0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d001      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0b8      	b.n	800156a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d020      	beq.n	8001446 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001410:	4b59      	ldr	r3, [pc, #356]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4a58      	ldr	r2, [pc, #352]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800141a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001428:	4b53      	ldr	r3, [pc, #332]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a52      	ldr	r2, [pc, #328]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001432:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001434:	4b50      	ldr	r3, [pc, #320]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	494d      	ldr	r1, [pc, #308]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	4313      	orrs	r3, r2
 8001444:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d040      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d107      	bne.n	800146a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	4b47      	ldr	r3, [pc, #284]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d115      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e07f      	b.n	800156a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001472:	4b41      	ldr	r3, [pc, #260]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d109      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e073      	b.n	800156a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001482:	4b3d      	ldr	r3, [pc, #244]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e06b      	b.n	800156a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001492:	4b39      	ldr	r3, [pc, #228]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f023 0203 	bic.w	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4936      	ldr	r1, [pc, #216]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a4:	f7ff f9c0 	bl	8000828 <HAL_GetTick>
 80014a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ac:	f7ff f9bc 	bl	8000828 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e053      	b.n	800156a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 020c 	and.w	r2, r3, #12
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d1eb      	bne.n	80014ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014d4:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <HAL_RCC_ClockConfig+0x1c0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d210      	bcs.n	8001504 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e2:	4b24      	ldr	r3, [pc, #144]	@ (8001574 <HAL_RCC_ClockConfig+0x1c0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 0207 	bic.w	r2, r3, #7
 80014ea:	4922      	ldr	r1, [pc, #136]	@ (8001574 <HAL_RCC_ClockConfig+0x1c0>)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f2:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <HAL_RCC_ClockConfig+0x1c0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d001      	beq.n	8001504 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e032      	b.n	800156a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d008      	beq.n	8001522 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001510:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4916      	ldr	r1, [pc, #88]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	4313      	orrs	r3, r2
 8001520:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800152e:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	490e      	ldr	r1, [pc, #56]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001542:	f000 f821 	bl	8001588 <HAL_RCC_GetSysClockFreq>
 8001546:	4602      	mov	r2, r0
 8001548:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	490a      	ldr	r1, [pc, #40]	@ (800157c <HAL_RCC_ClockConfig+0x1c8>)
 8001554:	5ccb      	ldrb	r3, [r1, r3]
 8001556:	fa22 f303 	lsr.w	r3, r2, r3
 800155a:	4a09      	ldr	r2, [pc, #36]	@ (8001580 <HAL_RCC_ClockConfig+0x1cc>)
 800155c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <HAL_RCC_ClockConfig+0x1d0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff f91e 	bl	80007a4 <HAL_InitTick>

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40022000 	.word	0x40022000
 8001578:	40021000 	.word	0x40021000
 800157c:	08002a04 	.word	0x08002a04
 8001580:	20000000 	.word	0x20000000
 8001584:	2000000c 	.word	0x2000000c

08001588 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001588:	b490      	push	{r4, r7}
 800158a:	b08a      	sub	sp, #40	@ 0x28
 800158c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800158e:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xac>)
 8001590:	1d3c      	adds	r4, r7, #4
 8001592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001598:	f240 2301 	movw	r3, #513	@ 0x201
 800159c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015b2:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b04      	cmp	r3, #4
 80015c0:	d002      	beq.n	80015c8 <HAL_RCC_GetSysClockFreq+0x40>
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d003      	beq.n	80015ce <HAL_RCC_GetSysClockFreq+0x46>
 80015c6:	e02b      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015c8:	4b1c      	ldr	r3, [pc, #112]	@ (800163c <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ca:	623b      	str	r3, [r7, #32]
      break;
 80015cc:	e02b      	b.n	8001626 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	0c9b      	lsrs	r3, r3, #18
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3328      	adds	r3, #40	@ 0x28
 80015d8:	443b      	add	r3, r7
 80015da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015de:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d012      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015ea:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	0c5b      	lsrs	r3, r3, #17
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	3328      	adds	r3, #40	@ 0x28
 80015f6:	443b      	add	r3, r7
 80015f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	4a0e      	ldr	r2, [pc, #56]	@ (800163c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001602:	fb03 f202 	mul.w	r2, r3, r2
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	fbb2 f3f3 	udiv	r3, r2, r3
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
 800160e:	e004      	b.n	800161a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	623b      	str	r3, [r7, #32]
      break;
 800161e:	e002      	b.n	8001626 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001622:	623b      	str	r3, [r7, #32]
      break;
 8001624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001626:	6a3b      	ldr	r3, [r7, #32]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3728      	adds	r7, #40	@ 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bc90      	pop	{r4, r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	080029f4 	.word	0x080029f4
 8001638:	40021000 	.word	0x40021000
 800163c:	007a1200 	.word	0x007a1200
 8001640:	003d0900 	.word	0x003d0900

08001644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001648:	4b02      	ldr	r3, [pc, #8]	@ (8001654 <HAL_RCC_GetHCLKFreq+0x10>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20000000 	.word	0x20000000

08001658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800165c:	f7ff fff2 	bl	8001644 <HAL_RCC_GetHCLKFreq>
 8001660:	4602      	mov	r2, r0
 8001662:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	4903      	ldr	r1, [pc, #12]	@ (800167c <HAL_RCC_GetPCLK1Freq+0x24>)
 800166e:	5ccb      	ldrb	r3, [r1, r3]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000
 800167c:	08002a14 	.word	0x08002a14

08001680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001684:	f7ff ffde 	bl	8001644 <HAL_RCC_GetHCLKFreq>
 8001688:	4602      	mov	r2, r0
 800168a:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	0adb      	lsrs	r3, r3, #11
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	4903      	ldr	r1, [pc, #12]	@ (80016a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001696:	5ccb      	ldrb	r3, [r1, r3]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800169c:	4618      	mov	r0, r3
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40021000 	.word	0x40021000
 80016a4:	08002a14 	.word	0x08002a14

080016a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <RCC_Delay+0x34>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <RCC_Delay+0x38>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	0a5b      	lsrs	r3, r3, #9
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	fb02 f303 	mul.w	r3, r2, r3
 80016c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016c4:	bf00      	nop
  }
  while (Delay --);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1e5a      	subs	r2, r3, #1
 80016ca:	60fa      	str	r2, [r7, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f9      	bne.n	80016c4 <RCC_Delay+0x1c>
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	20000000 	.word	0x20000000
 80016e0:	10624dd3 	.word	0x10624dd3

080016e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d07d      	beq.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001704:	4b4f      	ldr	r3, [pc, #316]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10d      	bne.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001710:	4b4c      	ldr	r3, [pc, #304]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	4a4b      	ldr	r2, [pc, #300]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171a:	61d3      	str	r3, [r2, #28]
 800171c:	4b49      	ldr	r3, [pc, #292]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001728:	2301      	movs	r3, #1
 800172a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	4b46      	ldr	r3, [pc, #280]	@ (8001848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d118      	bne.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001738:	4b43      	ldr	r3, [pc, #268]	@ (8001848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a42      	ldr	r2, [pc, #264]	@ (8001848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800173e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001742:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001744:	f7ff f870 	bl	8000828 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174a:	e008      	b.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174c:	f7ff f86c 	bl	8000828 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	@ 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e06d      	b.n	800183a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	4b3a      	ldr	r3, [pc, #232]	@ (8001848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800176a:	4b36      	ldr	r3, [pc, #216]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001772:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d02e      	beq.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d027      	beq.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001788:	4b2e      	ldr	r3, [pc, #184]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001790:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001792:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001794:	2201      	movs	r2, #1
 8001796:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001798:	4b2c      	ldr	r3, [pc, #176]	@ (800184c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800179e:	4a29      	ldr	r2, [pc, #164]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d014      	beq.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff f83b 	bl	8000828 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b4:	e00a      	b.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b6:	f7ff f837 	bl	8000828 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e036      	b.n	800183a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ee      	beq.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4917      	ldr	r1, [pc, #92]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f0:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	4a13      	ldr	r2, [pc, #76]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001808:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	490b      	ldr	r1, [pc, #44]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	2b00      	cmp	r3, #0
 8001824:	d008      	beq.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001826:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	4904      	ldr	r1, [pc, #16]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	40007000 	.word	0x40007000
 800184c:	42420440 	.word	0x42420440

08001850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e03f      	b.n	80018e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d106      	bne.n	800187c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7fe ff22 	bl	80006c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2224      	movs	r2, #36	@ 0x24
 8001880:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 fb39 	bl	8001f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80018a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695a      	ldr	r2, [r3, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80018b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80018c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2220      	movs	r2, #32
 80018d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b08a      	sub	sp, #40	@ 0x28
 80018ee:	af02      	add	r7, sp, #8
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4613      	mov	r3, r2
 80018f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b20      	cmp	r3, #32
 8001908:	d17c      	bne.n	8001a04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <HAL_UART_Transmit+0x2c>
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e075      	b.n	8001a06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_UART_Transmit+0x3e>
 8001924:	2302      	movs	r3, #2
 8001926:	e06e      	b.n	8001a06 <HAL_UART_Transmit+0x11c>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2221      	movs	r2, #33	@ 0x21
 800193a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800193e:	f7fe ff73 	bl	8000828 <HAL_GetTick>
 8001942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	88fa      	ldrh	r2, [r7, #6]
 800194e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001958:	d108      	bne.n	800196c <HAL_UART_Transmit+0x82>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d104      	bne.n	800196c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	e003      	b.n	8001974 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 800197c:	e02a      	b.n	80019d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2200      	movs	r2, #0
 8001986:	2180      	movs	r1, #128	@ 0x80
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 f95c 	bl	8001c46 <UART_WaitOnFlagUntilTimeout>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e036      	b.n	8001a06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10b      	bne.n	80019b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	3302      	adds	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	e007      	b.n	80019c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	3301      	adds	r3, #1
 80019c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80019d8:	b29b      	uxth	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1cf      	bne.n	800197e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2200      	movs	r2, #0
 80019e6:	2140      	movs	r1, #64	@ 0x40
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 f92c 	bl	8001c46 <UART_WaitOnFlagUntilTimeout>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e006      	b.n	8001a06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2220      	movs	r2, #32
 80019fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3720      	adds	r7, #32
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10d      	bne.n	8001a62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_UART_IRQHandler+0x52>
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f9d5 	bl	8001e0a <UART_Receive_IT>
      return;
 8001a60:	e0d0      	b.n	8001c04 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80b0 	beq.w	8001bca <HAL_UART_IRQHandler+0x1ba>
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_UART_IRQHandler+0x70>
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 80a5 	beq.w	8001bca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00a      	beq.n	8001aa0 <HAL_UART_IRQHandler+0x90>
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <HAL_UART_IRQHandler+0xb0>
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab8:	f043 0202 	orr.w	r2, r3, #2
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_UART_IRQHandler+0xd0>
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad8:	f043 0204 	orr.w	r2, r3, #4
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00f      	beq.n	8001b0a <HAL_UART_IRQHandler+0xfa>
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f003 0320 	and.w	r3, r3, #32
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d104      	bne.n	8001afe <HAL_UART_IRQHandler+0xee>
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b02:	f043 0208 	orr.w	r2, r3, #8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d077      	beq.n	8001c02 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <HAL_UART_IRQHandler+0x11c>
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f96f 	bl	8001e0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d102      	bne.n	8001b54 <HAL_UART_IRQHandler+0x144>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d031      	beq.n	8001bb8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f8c0 	bl	8001cda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d023      	beq.n	8001bb0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b76:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d013      	beq.n	8001ba8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b84:	4a21      	ldr	r2, [pc, #132]	@ (8001c0c <HAL_UART_IRQHandler+0x1fc>)
 8001b86:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe ff63 	bl	8000a58 <HAL_DMA_Abort_IT>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d016      	beq.n	8001bc6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ba6:	e00e      	b.n	8001bc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f843 	bl	8001c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bae:	e00a      	b.n	8001bc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f83f 	bl	8001c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bb6:	e006      	b.n	8001bc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f83b 	bl	8001c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 8001bc4:	e01d      	b.n	8001c02 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bc6:	bf00      	nop
    return;
 8001bc8:	e01b      	b.n	8001c02 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_UART_IRQHandler+0x1d6>
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8ac 	bl	8001d3c <UART_Transmit_IT>
    return;
 8001be4:	e00e      	b.n	8001c04 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d009      	beq.n	8001c04 <HAL_UART_IRQHandler+0x1f4>
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d004      	beq.n	8001c04 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8ed 	bl	8001dda <UART_EndTransmit_IT>
    return;
 8001c00:	e000      	b.n	8001c04 <HAL_UART_IRQHandler+0x1f4>
    return;
 8001c02:	bf00      	nop
  }
}
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	08001d15 	.word	0x08001d15

08001c10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4613      	mov	r3, r2
 8001c54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c56:	e02c      	b.n	8001cb2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5e:	d028      	beq.n	8001cb2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c66:	f7fe fddf 	bl	8000828 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d21d      	bcs.n	8001cb2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8001c84:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e00f      	b.n	8001cd2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	bf0c      	ite	eq
 8001cc2:	2301      	moveq	r3, #1
 8001cc4:	2300      	movne	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d0c3      	beq.n	8001c58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8001cf0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0201 	bic.w	r2, r2, #1
 8001d00:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2220      	movs	r2, #32
 8001d06:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f7ff ff80 	bl	8001c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b21      	cmp	r3, #33	@ 0x21
 8001d4e:	d13e      	bne.n	8001dce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d58:	d114      	bne.n	8001d84 <UART_Transmit_IT+0x48>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d110      	bne.n	8001d84 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	1c9a      	adds	r2, r3, #2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	621a      	str	r2, [r3, #32]
 8001d82:	e008      	b.n	8001d96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	1c59      	adds	r1, r3, #1
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6211      	str	r1, [r2, #32]
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4619      	mov	r1, r3
 8001da4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10f      	bne.n	8001dca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001db8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001dce:	2302      	movs	r3, #2
  }
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001df0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff08 	bl	8001c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b22      	cmp	r3, #34	@ 0x22
 8001e1c:	d170      	bne.n	8001f00 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e26:	d117      	bne.n	8001e58 <UART_Receive_IT+0x4e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d113      	bne.n	8001e58 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e38:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e50:	1c9a      	adds	r2, r3, #2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e56:	e026      	b.n	8001ea6 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e6a:	d007      	beq.n	8001e7c <UART_Receive_IT+0x72>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10a      	bne.n	8001e8a <UART_Receive_IT+0x80>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d106      	bne.n	8001e8a <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	e008      	b.n	8001e9c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d120      	bne.n	8001efc <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0220 	bic.w	r2, r2, #32
 8001ec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ed8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fe95 	bl	8001c22 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e002      	b.n	8001f02 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e000      	b.n	8001f02 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001f00:	2302      	movs	r3, #2
  }
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001f46:	f023 030c 	bic.w	r3, r3, #12
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002020 <UART_SetConfig+0x114>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d103      	bne.n	8001f7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f74:	f7ff fb84 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	e002      	b.n	8001f82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f7c:	f7ff fb6c 	bl	8001658 <HAL_RCC_GetPCLK1Freq>
 8001f80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	009a      	lsls	r2, r3, #2
 8001f8c:	441a      	add	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	4a22      	ldr	r2, [pc, #136]	@ (8002024 <UART_SetConfig+0x118>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	0119      	lsls	r1, r3, #4
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	009a      	lsls	r2, r3, #2
 8001fac:	441a      	add	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002024 <UART_SetConfig+0x118>)
 8001fba:	fba3 0302 	umull	r0, r3, r3, r2
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2064      	movs	r0, #100	@ 0x64
 8001fc2:	fb00 f303 	mul.w	r3, r0, r3
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	3332      	adds	r3, #50	@ 0x32
 8001fcc:	4a15      	ldr	r2, [pc, #84]	@ (8002024 <UART_SetConfig+0x118>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fd8:	4419      	add	r1, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009a      	lsls	r2, r3, #2
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <UART_SetConfig+0x118>)
 8001ff2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2064      	movs	r0, #100	@ 0x64
 8001ffa:	fb00 f303 	mul.w	r3, r0, r3
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	3332      	adds	r3, #50	@ 0x32
 8002004:	4a07      	ldr	r2, [pc, #28]	@ (8002024 <UART_SetConfig+0x118>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	f003 020f 	and.w	r2, r3, #15
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	440a      	add	r2, r1
 8002016:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40013800 	.word	0x40013800
 8002024:	51eb851f 	.word	0x51eb851f

08002028 <main>:
 *      Author: MD_10572
 */
#include "main.h"

int main(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  hwInit();
 800202c:	f7fe fb9a 	bl	8000764 <hwInit>
  apInit();
 8002030:	f7fe f88c 	bl	800014c <apInit>
  apMain();
 8002034:	f7fe f894 	bl	8000160 <apMain>

  return 0;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	bd80      	pop	{r7, pc}

0800203e <_vsniprintf_r>:
 800203e:	b530      	push	{r4, r5, lr}
 8002040:	4614      	mov	r4, r2
 8002042:	2c00      	cmp	r4, #0
 8002044:	4605      	mov	r5, r0
 8002046:	461a      	mov	r2, r3
 8002048:	b09b      	sub	sp, #108	@ 0x6c
 800204a:	da05      	bge.n	8002058 <_vsniprintf_r+0x1a>
 800204c:	238b      	movs	r3, #139	@ 0x8b
 800204e:	6003      	str	r3, [r0, #0]
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	b01b      	add	sp, #108	@ 0x6c
 8002056:	bd30      	pop	{r4, r5, pc}
 8002058:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800205c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	9319      	str	r3, [sp, #100]	@ 0x64
 8002066:	bf0c      	ite	eq
 8002068:	4623      	moveq	r3, r4
 800206a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800206e:	9302      	str	r3, [sp, #8]
 8002070:	9305      	str	r3, [sp, #20]
 8002072:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002076:	9100      	str	r1, [sp, #0]
 8002078:	9104      	str	r1, [sp, #16]
 800207a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800207e:	4669      	mov	r1, sp
 8002080:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8002082:	f000 f99f 	bl	80023c4 <_svfiprintf_r>
 8002086:	1c43      	adds	r3, r0, #1
 8002088:	bfbc      	itt	lt
 800208a:	238b      	movlt	r3, #139	@ 0x8b
 800208c:	602b      	strlt	r3, [r5, #0]
 800208e:	2c00      	cmp	r4, #0
 8002090:	d0e0      	beq.n	8002054 <_vsniprintf_r+0x16>
 8002092:	2200      	movs	r2, #0
 8002094:	9b00      	ldr	r3, [sp, #0]
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e7dc      	b.n	8002054 <_vsniprintf_r+0x16>
	...

0800209c <vsniprintf>:
 800209c:	b507      	push	{r0, r1, r2, lr}
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	460a      	mov	r2, r1
 80020a4:	4601      	mov	r1, r0
 80020a6:	4803      	ldr	r0, [pc, #12]	@ (80020b4 <vsniprintf+0x18>)
 80020a8:	6800      	ldr	r0, [r0, #0]
 80020aa:	f7ff ffc8 	bl	800203e <_vsniprintf_r>
 80020ae:	b003      	add	sp, #12
 80020b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80020b4:	20000014 	.word	0x20000014

080020b8 <memset>:
 80020b8:	4603      	mov	r3, r0
 80020ba:	4402      	add	r2, r0
 80020bc:	4293      	cmp	r3, r2
 80020be:	d100      	bne.n	80020c2 <memset+0xa>
 80020c0:	4770      	bx	lr
 80020c2:	f803 1b01 	strb.w	r1, [r3], #1
 80020c6:	e7f9      	b.n	80020bc <memset+0x4>

080020c8 <__errno>:
 80020c8:	4b01      	ldr	r3, [pc, #4]	@ (80020d0 <__errno+0x8>)
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000014 	.word	0x20000014

080020d4 <__libc_init_array>:
 80020d4:	b570      	push	{r4, r5, r6, lr}
 80020d6:	2600      	movs	r6, #0
 80020d8:	4d0c      	ldr	r5, [pc, #48]	@ (800210c <__libc_init_array+0x38>)
 80020da:	4c0d      	ldr	r4, [pc, #52]	@ (8002110 <__libc_init_array+0x3c>)
 80020dc:	1b64      	subs	r4, r4, r5
 80020de:	10a4      	asrs	r4, r4, #2
 80020e0:	42a6      	cmp	r6, r4
 80020e2:	d109      	bne.n	80020f8 <__libc_init_array+0x24>
 80020e4:	f000 fc76 	bl	80029d4 <_init>
 80020e8:	2600      	movs	r6, #0
 80020ea:	4d0a      	ldr	r5, [pc, #40]	@ (8002114 <__libc_init_array+0x40>)
 80020ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002118 <__libc_init_array+0x44>)
 80020ee:	1b64      	subs	r4, r4, r5
 80020f0:	10a4      	asrs	r4, r4, #2
 80020f2:	42a6      	cmp	r6, r4
 80020f4:	d105      	bne.n	8002102 <__libc_init_array+0x2e>
 80020f6:	bd70      	pop	{r4, r5, r6, pc}
 80020f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020fc:	4798      	blx	r3
 80020fe:	3601      	adds	r6, #1
 8002100:	e7ee      	b.n	80020e0 <__libc_init_array+0xc>
 8002102:	f855 3b04 	ldr.w	r3, [r5], #4
 8002106:	4798      	blx	r3
 8002108:	3601      	adds	r6, #1
 800210a:	e7f2      	b.n	80020f2 <__libc_init_array+0x1e>
 800210c:	08002a50 	.word	0x08002a50
 8002110:	08002a50 	.word	0x08002a50
 8002114:	08002a50 	.word	0x08002a50
 8002118:	08002a54 	.word	0x08002a54

0800211c <__retarget_lock_acquire_recursive>:
 800211c:	4770      	bx	lr

0800211e <__retarget_lock_release_recursive>:
 800211e:	4770      	bx	lr

08002120 <_free_r>:
 8002120:	b538      	push	{r3, r4, r5, lr}
 8002122:	4605      	mov	r5, r0
 8002124:	2900      	cmp	r1, #0
 8002126:	d040      	beq.n	80021aa <_free_r+0x8a>
 8002128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800212c:	1f0c      	subs	r4, r1, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	bfb8      	it	lt
 8002132:	18e4      	addlt	r4, r4, r3
 8002134:	f000 f8de 	bl	80022f4 <__malloc_lock>
 8002138:	4a1c      	ldr	r2, [pc, #112]	@ (80021ac <_free_r+0x8c>)
 800213a:	6813      	ldr	r3, [r2, #0]
 800213c:	b933      	cbnz	r3, 800214c <_free_r+0x2c>
 800213e:	6063      	str	r3, [r4, #4]
 8002140:	6014      	str	r4, [r2, #0]
 8002142:	4628      	mov	r0, r5
 8002144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002148:	f000 b8da 	b.w	8002300 <__malloc_unlock>
 800214c:	42a3      	cmp	r3, r4
 800214e:	d908      	bls.n	8002162 <_free_r+0x42>
 8002150:	6820      	ldr	r0, [r4, #0]
 8002152:	1821      	adds	r1, r4, r0
 8002154:	428b      	cmp	r3, r1
 8002156:	bf01      	itttt	eq
 8002158:	6819      	ldreq	r1, [r3, #0]
 800215a:	685b      	ldreq	r3, [r3, #4]
 800215c:	1809      	addeq	r1, r1, r0
 800215e:	6021      	streq	r1, [r4, #0]
 8002160:	e7ed      	b.n	800213e <_free_r+0x1e>
 8002162:	461a      	mov	r2, r3
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	b10b      	cbz	r3, 800216c <_free_r+0x4c>
 8002168:	42a3      	cmp	r3, r4
 800216a:	d9fa      	bls.n	8002162 <_free_r+0x42>
 800216c:	6811      	ldr	r1, [r2, #0]
 800216e:	1850      	adds	r0, r2, r1
 8002170:	42a0      	cmp	r0, r4
 8002172:	d10b      	bne.n	800218c <_free_r+0x6c>
 8002174:	6820      	ldr	r0, [r4, #0]
 8002176:	4401      	add	r1, r0
 8002178:	1850      	adds	r0, r2, r1
 800217a:	4283      	cmp	r3, r0
 800217c:	6011      	str	r1, [r2, #0]
 800217e:	d1e0      	bne.n	8002142 <_free_r+0x22>
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4408      	add	r0, r1
 8002186:	6010      	str	r0, [r2, #0]
 8002188:	6053      	str	r3, [r2, #4]
 800218a:	e7da      	b.n	8002142 <_free_r+0x22>
 800218c:	d902      	bls.n	8002194 <_free_r+0x74>
 800218e:	230c      	movs	r3, #12
 8002190:	602b      	str	r3, [r5, #0]
 8002192:	e7d6      	b.n	8002142 <_free_r+0x22>
 8002194:	6820      	ldr	r0, [r4, #0]
 8002196:	1821      	adds	r1, r4, r0
 8002198:	428b      	cmp	r3, r1
 800219a:	bf01      	itttt	eq
 800219c:	6819      	ldreq	r1, [r3, #0]
 800219e:	685b      	ldreq	r3, [r3, #4]
 80021a0:	1809      	addeq	r1, r1, r0
 80021a2:	6021      	streq	r1, [r4, #0]
 80021a4:	6063      	str	r3, [r4, #4]
 80021a6:	6054      	str	r4, [r2, #4]
 80021a8:	e7cb      	b.n	8002142 <_free_r+0x22>
 80021aa:	bd38      	pop	{r3, r4, r5, pc}
 80021ac:	20000210 	.word	0x20000210

080021b0 <sbrk_aligned>:
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	4e0f      	ldr	r6, [pc, #60]	@ (80021f0 <sbrk_aligned+0x40>)
 80021b4:	460c      	mov	r4, r1
 80021b6:	6831      	ldr	r1, [r6, #0]
 80021b8:	4605      	mov	r5, r0
 80021ba:	b911      	cbnz	r1, 80021c2 <sbrk_aligned+0x12>
 80021bc:	f000 fba8 	bl	8002910 <_sbrk_r>
 80021c0:	6030      	str	r0, [r6, #0]
 80021c2:	4621      	mov	r1, r4
 80021c4:	4628      	mov	r0, r5
 80021c6:	f000 fba3 	bl	8002910 <_sbrk_r>
 80021ca:	1c43      	adds	r3, r0, #1
 80021cc:	d103      	bne.n	80021d6 <sbrk_aligned+0x26>
 80021ce:	f04f 34ff 	mov.w	r4, #4294967295
 80021d2:	4620      	mov	r0, r4
 80021d4:	bd70      	pop	{r4, r5, r6, pc}
 80021d6:	1cc4      	adds	r4, r0, #3
 80021d8:	f024 0403 	bic.w	r4, r4, #3
 80021dc:	42a0      	cmp	r0, r4
 80021de:	d0f8      	beq.n	80021d2 <sbrk_aligned+0x22>
 80021e0:	1a21      	subs	r1, r4, r0
 80021e2:	4628      	mov	r0, r5
 80021e4:	f000 fb94 	bl	8002910 <_sbrk_r>
 80021e8:	3001      	adds	r0, #1
 80021ea:	d1f2      	bne.n	80021d2 <sbrk_aligned+0x22>
 80021ec:	e7ef      	b.n	80021ce <sbrk_aligned+0x1e>
 80021ee:	bf00      	nop
 80021f0:	2000020c 	.word	0x2000020c

080021f4 <_malloc_r>:
 80021f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021f8:	1ccd      	adds	r5, r1, #3
 80021fa:	f025 0503 	bic.w	r5, r5, #3
 80021fe:	3508      	adds	r5, #8
 8002200:	2d0c      	cmp	r5, #12
 8002202:	bf38      	it	cc
 8002204:	250c      	movcc	r5, #12
 8002206:	2d00      	cmp	r5, #0
 8002208:	4606      	mov	r6, r0
 800220a:	db01      	blt.n	8002210 <_malloc_r+0x1c>
 800220c:	42a9      	cmp	r1, r5
 800220e:	d904      	bls.n	800221a <_malloc_r+0x26>
 8002210:	230c      	movs	r3, #12
 8002212:	6033      	str	r3, [r6, #0]
 8002214:	2000      	movs	r0, #0
 8002216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800221a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80022f0 <_malloc_r+0xfc>
 800221e:	f000 f869 	bl	80022f4 <__malloc_lock>
 8002222:	f8d8 3000 	ldr.w	r3, [r8]
 8002226:	461c      	mov	r4, r3
 8002228:	bb44      	cbnz	r4, 800227c <_malloc_r+0x88>
 800222a:	4629      	mov	r1, r5
 800222c:	4630      	mov	r0, r6
 800222e:	f7ff ffbf 	bl	80021b0 <sbrk_aligned>
 8002232:	1c43      	adds	r3, r0, #1
 8002234:	4604      	mov	r4, r0
 8002236:	d158      	bne.n	80022ea <_malloc_r+0xf6>
 8002238:	f8d8 4000 	ldr.w	r4, [r8]
 800223c:	4627      	mov	r7, r4
 800223e:	2f00      	cmp	r7, #0
 8002240:	d143      	bne.n	80022ca <_malloc_r+0xd6>
 8002242:	2c00      	cmp	r4, #0
 8002244:	d04b      	beq.n	80022de <_malloc_r+0xea>
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	4639      	mov	r1, r7
 800224a:	4630      	mov	r0, r6
 800224c:	eb04 0903 	add.w	r9, r4, r3
 8002250:	f000 fb5e 	bl	8002910 <_sbrk_r>
 8002254:	4581      	cmp	r9, r0
 8002256:	d142      	bne.n	80022de <_malloc_r+0xea>
 8002258:	6821      	ldr	r1, [r4, #0]
 800225a:	4630      	mov	r0, r6
 800225c:	1a6d      	subs	r5, r5, r1
 800225e:	4629      	mov	r1, r5
 8002260:	f7ff ffa6 	bl	80021b0 <sbrk_aligned>
 8002264:	3001      	adds	r0, #1
 8002266:	d03a      	beq.n	80022de <_malloc_r+0xea>
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	442b      	add	r3, r5
 800226c:	6023      	str	r3, [r4, #0]
 800226e:	f8d8 3000 	ldr.w	r3, [r8]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	bb62      	cbnz	r2, 80022d0 <_malloc_r+0xdc>
 8002276:	f8c8 7000 	str.w	r7, [r8]
 800227a:	e00f      	b.n	800229c <_malloc_r+0xa8>
 800227c:	6822      	ldr	r2, [r4, #0]
 800227e:	1b52      	subs	r2, r2, r5
 8002280:	d420      	bmi.n	80022c4 <_malloc_r+0xd0>
 8002282:	2a0b      	cmp	r2, #11
 8002284:	d917      	bls.n	80022b6 <_malloc_r+0xc2>
 8002286:	1961      	adds	r1, r4, r5
 8002288:	42a3      	cmp	r3, r4
 800228a:	6025      	str	r5, [r4, #0]
 800228c:	bf18      	it	ne
 800228e:	6059      	strne	r1, [r3, #4]
 8002290:	6863      	ldr	r3, [r4, #4]
 8002292:	bf08      	it	eq
 8002294:	f8c8 1000 	streq.w	r1, [r8]
 8002298:	5162      	str	r2, [r4, r5]
 800229a:	604b      	str	r3, [r1, #4]
 800229c:	4630      	mov	r0, r6
 800229e:	f000 f82f 	bl	8002300 <__malloc_unlock>
 80022a2:	f104 000b 	add.w	r0, r4, #11
 80022a6:	1d23      	adds	r3, r4, #4
 80022a8:	f020 0007 	bic.w	r0, r0, #7
 80022ac:	1ac2      	subs	r2, r0, r3
 80022ae:	bf1c      	itt	ne
 80022b0:	1a1b      	subne	r3, r3, r0
 80022b2:	50a3      	strne	r3, [r4, r2]
 80022b4:	e7af      	b.n	8002216 <_malloc_r+0x22>
 80022b6:	6862      	ldr	r2, [r4, #4]
 80022b8:	42a3      	cmp	r3, r4
 80022ba:	bf0c      	ite	eq
 80022bc:	f8c8 2000 	streq.w	r2, [r8]
 80022c0:	605a      	strne	r2, [r3, #4]
 80022c2:	e7eb      	b.n	800229c <_malloc_r+0xa8>
 80022c4:	4623      	mov	r3, r4
 80022c6:	6864      	ldr	r4, [r4, #4]
 80022c8:	e7ae      	b.n	8002228 <_malloc_r+0x34>
 80022ca:	463c      	mov	r4, r7
 80022cc:	687f      	ldr	r7, [r7, #4]
 80022ce:	e7b6      	b.n	800223e <_malloc_r+0x4a>
 80022d0:	461a      	mov	r2, r3
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	42a3      	cmp	r3, r4
 80022d6:	d1fb      	bne.n	80022d0 <_malloc_r+0xdc>
 80022d8:	2300      	movs	r3, #0
 80022da:	6053      	str	r3, [r2, #4]
 80022dc:	e7de      	b.n	800229c <_malloc_r+0xa8>
 80022de:	230c      	movs	r3, #12
 80022e0:	4630      	mov	r0, r6
 80022e2:	6033      	str	r3, [r6, #0]
 80022e4:	f000 f80c 	bl	8002300 <__malloc_unlock>
 80022e8:	e794      	b.n	8002214 <_malloc_r+0x20>
 80022ea:	6005      	str	r5, [r0, #0]
 80022ec:	e7d6      	b.n	800229c <_malloc_r+0xa8>
 80022ee:	bf00      	nop
 80022f0:	20000210 	.word	0x20000210

080022f4 <__malloc_lock>:
 80022f4:	4801      	ldr	r0, [pc, #4]	@ (80022fc <__malloc_lock+0x8>)
 80022f6:	f7ff bf11 	b.w	800211c <__retarget_lock_acquire_recursive>
 80022fa:	bf00      	nop
 80022fc:	20000208 	.word	0x20000208

08002300 <__malloc_unlock>:
 8002300:	4801      	ldr	r0, [pc, #4]	@ (8002308 <__malloc_unlock+0x8>)
 8002302:	f7ff bf0c 	b.w	800211e <__retarget_lock_release_recursive>
 8002306:	bf00      	nop
 8002308:	20000208 	.word	0x20000208

0800230c <__ssputs_r>:
 800230c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002310:	461f      	mov	r7, r3
 8002312:	688e      	ldr	r6, [r1, #8]
 8002314:	4682      	mov	sl, r0
 8002316:	42be      	cmp	r6, r7
 8002318:	460c      	mov	r4, r1
 800231a:	4690      	mov	r8, r2
 800231c:	680b      	ldr	r3, [r1, #0]
 800231e:	d82d      	bhi.n	800237c <__ssputs_r+0x70>
 8002320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002328:	d026      	beq.n	8002378 <__ssputs_r+0x6c>
 800232a:	6965      	ldr	r5, [r4, #20]
 800232c:	6909      	ldr	r1, [r1, #16]
 800232e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002332:	eba3 0901 	sub.w	r9, r3, r1
 8002336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800233a:	1c7b      	adds	r3, r7, #1
 800233c:	444b      	add	r3, r9
 800233e:	106d      	asrs	r5, r5, #1
 8002340:	429d      	cmp	r5, r3
 8002342:	bf38      	it	cc
 8002344:	461d      	movcc	r5, r3
 8002346:	0553      	lsls	r3, r2, #21
 8002348:	d527      	bpl.n	800239a <__ssputs_r+0x8e>
 800234a:	4629      	mov	r1, r5
 800234c:	f7ff ff52 	bl	80021f4 <_malloc_r>
 8002350:	4606      	mov	r6, r0
 8002352:	b360      	cbz	r0, 80023ae <__ssputs_r+0xa2>
 8002354:	464a      	mov	r2, r9
 8002356:	6921      	ldr	r1, [r4, #16]
 8002358:	f000 faf8 	bl	800294c <memcpy>
 800235c:	89a3      	ldrh	r3, [r4, #12]
 800235e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002366:	81a3      	strh	r3, [r4, #12]
 8002368:	6126      	str	r6, [r4, #16]
 800236a:	444e      	add	r6, r9
 800236c:	6026      	str	r6, [r4, #0]
 800236e:	463e      	mov	r6, r7
 8002370:	6165      	str	r5, [r4, #20]
 8002372:	eba5 0509 	sub.w	r5, r5, r9
 8002376:	60a5      	str	r5, [r4, #8]
 8002378:	42be      	cmp	r6, r7
 800237a:	d900      	bls.n	800237e <__ssputs_r+0x72>
 800237c:	463e      	mov	r6, r7
 800237e:	4632      	mov	r2, r6
 8002380:	4641      	mov	r1, r8
 8002382:	6820      	ldr	r0, [r4, #0]
 8002384:	f000 faaa 	bl	80028dc <memmove>
 8002388:	2000      	movs	r0, #0
 800238a:	68a3      	ldr	r3, [r4, #8]
 800238c:	1b9b      	subs	r3, r3, r6
 800238e:	60a3      	str	r3, [r4, #8]
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	4433      	add	r3, r6
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800239a:	462a      	mov	r2, r5
 800239c:	f000 fae4 	bl	8002968 <_realloc_r>
 80023a0:	4606      	mov	r6, r0
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d1e0      	bne.n	8002368 <__ssputs_r+0x5c>
 80023a6:	4650      	mov	r0, sl
 80023a8:	6921      	ldr	r1, [r4, #16]
 80023aa:	f7ff feb9 	bl	8002120 <_free_r>
 80023ae:	230c      	movs	r3, #12
 80023b0:	f8ca 3000 	str.w	r3, [sl]
 80023b4:	89a3      	ldrh	r3, [r4, #12]
 80023b6:	f04f 30ff 	mov.w	r0, #4294967295
 80023ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023be:	81a3      	strh	r3, [r4, #12]
 80023c0:	e7e9      	b.n	8002396 <__ssputs_r+0x8a>
	...

080023c4 <_svfiprintf_r>:
 80023c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c8:	4698      	mov	r8, r3
 80023ca:	898b      	ldrh	r3, [r1, #12]
 80023cc:	4607      	mov	r7, r0
 80023ce:	061b      	lsls	r3, r3, #24
 80023d0:	460d      	mov	r5, r1
 80023d2:	4614      	mov	r4, r2
 80023d4:	b09d      	sub	sp, #116	@ 0x74
 80023d6:	d510      	bpl.n	80023fa <_svfiprintf_r+0x36>
 80023d8:	690b      	ldr	r3, [r1, #16]
 80023da:	b973      	cbnz	r3, 80023fa <_svfiprintf_r+0x36>
 80023dc:	2140      	movs	r1, #64	@ 0x40
 80023de:	f7ff ff09 	bl	80021f4 <_malloc_r>
 80023e2:	6028      	str	r0, [r5, #0]
 80023e4:	6128      	str	r0, [r5, #16]
 80023e6:	b930      	cbnz	r0, 80023f6 <_svfiprintf_r+0x32>
 80023e8:	230c      	movs	r3, #12
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	b01d      	add	sp, #116	@ 0x74
 80023f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023f6:	2340      	movs	r3, #64	@ 0x40
 80023f8:	616b      	str	r3, [r5, #20]
 80023fa:	2300      	movs	r3, #0
 80023fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80023fe:	2320      	movs	r3, #32
 8002400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002404:	2330      	movs	r3, #48	@ 0x30
 8002406:	f04f 0901 	mov.w	r9, #1
 800240a:	f8cd 800c 	str.w	r8, [sp, #12]
 800240e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80025a8 <_svfiprintf_r+0x1e4>
 8002412:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002416:	4623      	mov	r3, r4
 8002418:	469a      	mov	sl, r3
 800241a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800241e:	b10a      	cbz	r2, 8002424 <_svfiprintf_r+0x60>
 8002420:	2a25      	cmp	r2, #37	@ 0x25
 8002422:	d1f9      	bne.n	8002418 <_svfiprintf_r+0x54>
 8002424:	ebba 0b04 	subs.w	fp, sl, r4
 8002428:	d00b      	beq.n	8002442 <_svfiprintf_r+0x7e>
 800242a:	465b      	mov	r3, fp
 800242c:	4622      	mov	r2, r4
 800242e:	4629      	mov	r1, r5
 8002430:	4638      	mov	r0, r7
 8002432:	f7ff ff6b 	bl	800230c <__ssputs_r>
 8002436:	3001      	adds	r0, #1
 8002438:	f000 80a7 	beq.w	800258a <_svfiprintf_r+0x1c6>
 800243c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800243e:	445a      	add	r2, fp
 8002440:	9209      	str	r2, [sp, #36]	@ 0x24
 8002442:	f89a 3000 	ldrb.w	r3, [sl]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 809f 	beq.w	800258a <_svfiprintf_r+0x1c6>
 800244c:	2300      	movs	r3, #0
 800244e:	f04f 32ff 	mov.w	r2, #4294967295
 8002452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002456:	f10a 0a01 	add.w	sl, sl, #1
 800245a:	9304      	str	r3, [sp, #16]
 800245c:	9307      	str	r3, [sp, #28]
 800245e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002462:	931a      	str	r3, [sp, #104]	@ 0x68
 8002464:	4654      	mov	r4, sl
 8002466:	2205      	movs	r2, #5
 8002468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800246c:	484e      	ldr	r0, [pc, #312]	@ (80025a8 <_svfiprintf_r+0x1e4>)
 800246e:	f000 fa5f 	bl	8002930 <memchr>
 8002472:	9a04      	ldr	r2, [sp, #16]
 8002474:	b9d8      	cbnz	r0, 80024ae <_svfiprintf_r+0xea>
 8002476:	06d0      	lsls	r0, r2, #27
 8002478:	bf44      	itt	mi
 800247a:	2320      	movmi	r3, #32
 800247c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002480:	0711      	lsls	r1, r2, #28
 8002482:	bf44      	itt	mi
 8002484:	232b      	movmi	r3, #43	@ 0x2b
 8002486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800248a:	f89a 3000 	ldrb.w	r3, [sl]
 800248e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002490:	d015      	beq.n	80024be <_svfiprintf_r+0xfa>
 8002492:	4654      	mov	r4, sl
 8002494:	2000      	movs	r0, #0
 8002496:	f04f 0c0a 	mov.w	ip, #10
 800249a:	9a07      	ldr	r2, [sp, #28]
 800249c:	4621      	mov	r1, r4
 800249e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024a2:	3b30      	subs	r3, #48	@ 0x30
 80024a4:	2b09      	cmp	r3, #9
 80024a6:	d94b      	bls.n	8002540 <_svfiprintf_r+0x17c>
 80024a8:	b1b0      	cbz	r0, 80024d8 <_svfiprintf_r+0x114>
 80024aa:	9207      	str	r2, [sp, #28]
 80024ac:	e014      	b.n	80024d8 <_svfiprintf_r+0x114>
 80024ae:	eba0 0308 	sub.w	r3, r0, r8
 80024b2:	fa09 f303 	lsl.w	r3, r9, r3
 80024b6:	4313      	orrs	r3, r2
 80024b8:	46a2      	mov	sl, r4
 80024ba:	9304      	str	r3, [sp, #16]
 80024bc:	e7d2      	b.n	8002464 <_svfiprintf_r+0xa0>
 80024be:	9b03      	ldr	r3, [sp, #12]
 80024c0:	1d19      	adds	r1, r3, #4
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	9103      	str	r1, [sp, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	bfbb      	ittet	lt
 80024ca:	425b      	neglt	r3, r3
 80024cc:	f042 0202 	orrlt.w	r2, r2, #2
 80024d0:	9307      	strge	r3, [sp, #28]
 80024d2:	9307      	strlt	r3, [sp, #28]
 80024d4:	bfb8      	it	lt
 80024d6:	9204      	strlt	r2, [sp, #16]
 80024d8:	7823      	ldrb	r3, [r4, #0]
 80024da:	2b2e      	cmp	r3, #46	@ 0x2e
 80024dc:	d10a      	bne.n	80024f4 <_svfiprintf_r+0x130>
 80024de:	7863      	ldrb	r3, [r4, #1]
 80024e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80024e2:	d132      	bne.n	800254a <_svfiprintf_r+0x186>
 80024e4:	9b03      	ldr	r3, [sp, #12]
 80024e6:	3402      	adds	r4, #2
 80024e8:	1d1a      	adds	r2, r3, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	9203      	str	r2, [sp, #12]
 80024ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80024f2:	9305      	str	r3, [sp, #20]
 80024f4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80025ac <_svfiprintf_r+0x1e8>
 80024f8:	2203      	movs	r2, #3
 80024fa:	4650      	mov	r0, sl
 80024fc:	7821      	ldrb	r1, [r4, #0]
 80024fe:	f000 fa17 	bl	8002930 <memchr>
 8002502:	b138      	cbz	r0, 8002514 <_svfiprintf_r+0x150>
 8002504:	2240      	movs	r2, #64	@ 0x40
 8002506:	9b04      	ldr	r3, [sp, #16]
 8002508:	eba0 000a 	sub.w	r0, r0, sl
 800250c:	4082      	lsls	r2, r0
 800250e:	4313      	orrs	r3, r2
 8002510:	3401      	adds	r4, #1
 8002512:	9304      	str	r3, [sp, #16]
 8002514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002518:	2206      	movs	r2, #6
 800251a:	4825      	ldr	r0, [pc, #148]	@ (80025b0 <_svfiprintf_r+0x1ec>)
 800251c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002520:	f000 fa06 	bl	8002930 <memchr>
 8002524:	2800      	cmp	r0, #0
 8002526:	d036      	beq.n	8002596 <_svfiprintf_r+0x1d2>
 8002528:	4b22      	ldr	r3, [pc, #136]	@ (80025b4 <_svfiprintf_r+0x1f0>)
 800252a:	bb1b      	cbnz	r3, 8002574 <_svfiprintf_r+0x1b0>
 800252c:	9b03      	ldr	r3, [sp, #12]
 800252e:	3307      	adds	r3, #7
 8002530:	f023 0307 	bic.w	r3, r3, #7
 8002534:	3308      	adds	r3, #8
 8002536:	9303      	str	r3, [sp, #12]
 8002538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800253a:	4433      	add	r3, r6
 800253c:	9309      	str	r3, [sp, #36]	@ 0x24
 800253e:	e76a      	b.n	8002416 <_svfiprintf_r+0x52>
 8002540:	460c      	mov	r4, r1
 8002542:	2001      	movs	r0, #1
 8002544:	fb0c 3202 	mla	r2, ip, r2, r3
 8002548:	e7a8      	b.n	800249c <_svfiprintf_r+0xd8>
 800254a:	2300      	movs	r3, #0
 800254c:	f04f 0c0a 	mov.w	ip, #10
 8002550:	4619      	mov	r1, r3
 8002552:	3401      	adds	r4, #1
 8002554:	9305      	str	r3, [sp, #20]
 8002556:	4620      	mov	r0, r4
 8002558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800255c:	3a30      	subs	r2, #48	@ 0x30
 800255e:	2a09      	cmp	r2, #9
 8002560:	d903      	bls.n	800256a <_svfiprintf_r+0x1a6>
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0c6      	beq.n	80024f4 <_svfiprintf_r+0x130>
 8002566:	9105      	str	r1, [sp, #20]
 8002568:	e7c4      	b.n	80024f4 <_svfiprintf_r+0x130>
 800256a:	4604      	mov	r4, r0
 800256c:	2301      	movs	r3, #1
 800256e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002572:	e7f0      	b.n	8002556 <_svfiprintf_r+0x192>
 8002574:	ab03      	add	r3, sp, #12
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	462a      	mov	r2, r5
 800257a:	4638      	mov	r0, r7
 800257c:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <_svfiprintf_r+0x1f4>)
 800257e:	a904      	add	r1, sp, #16
 8002580:	f3af 8000 	nop.w
 8002584:	1c42      	adds	r2, r0, #1
 8002586:	4606      	mov	r6, r0
 8002588:	d1d6      	bne.n	8002538 <_svfiprintf_r+0x174>
 800258a:	89ab      	ldrh	r3, [r5, #12]
 800258c:	065b      	lsls	r3, r3, #25
 800258e:	f53f af2d 	bmi.w	80023ec <_svfiprintf_r+0x28>
 8002592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002594:	e72c      	b.n	80023f0 <_svfiprintf_r+0x2c>
 8002596:	ab03      	add	r3, sp, #12
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	462a      	mov	r2, r5
 800259c:	4638      	mov	r0, r7
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <_svfiprintf_r+0x1f4>)
 80025a0:	a904      	add	r1, sp, #16
 80025a2:	f000 f87d 	bl	80026a0 <_printf_i>
 80025a6:	e7ed      	b.n	8002584 <_svfiprintf_r+0x1c0>
 80025a8:	08002a1c 	.word	0x08002a1c
 80025ac:	08002a22 	.word	0x08002a22
 80025b0:	08002a26 	.word	0x08002a26
 80025b4:	00000000 	.word	0x00000000
 80025b8:	0800230d 	.word	0x0800230d

080025bc <_printf_common>:
 80025bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025c0:	4616      	mov	r6, r2
 80025c2:	4698      	mov	r8, r3
 80025c4:	688a      	ldr	r2, [r1, #8]
 80025c6:	690b      	ldr	r3, [r1, #16]
 80025c8:	4607      	mov	r7, r0
 80025ca:	4293      	cmp	r3, r2
 80025cc:	bfb8      	it	lt
 80025ce:	4613      	movlt	r3, r2
 80025d0:	6033      	str	r3, [r6, #0]
 80025d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80025d6:	460c      	mov	r4, r1
 80025d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80025dc:	b10a      	cbz	r2, 80025e2 <_printf_common+0x26>
 80025de:	3301      	adds	r3, #1
 80025e0:	6033      	str	r3, [r6, #0]
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	0699      	lsls	r1, r3, #26
 80025e6:	bf42      	ittt	mi
 80025e8:	6833      	ldrmi	r3, [r6, #0]
 80025ea:	3302      	addmi	r3, #2
 80025ec:	6033      	strmi	r3, [r6, #0]
 80025ee:	6825      	ldr	r5, [r4, #0]
 80025f0:	f015 0506 	ands.w	r5, r5, #6
 80025f4:	d106      	bne.n	8002604 <_printf_common+0x48>
 80025f6:	f104 0a19 	add.w	sl, r4, #25
 80025fa:	68e3      	ldr	r3, [r4, #12]
 80025fc:	6832      	ldr	r2, [r6, #0]
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	42ab      	cmp	r3, r5
 8002602:	dc2b      	bgt.n	800265c <_printf_common+0xa0>
 8002604:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002608:	6822      	ldr	r2, [r4, #0]
 800260a:	3b00      	subs	r3, #0
 800260c:	bf18      	it	ne
 800260e:	2301      	movne	r3, #1
 8002610:	0692      	lsls	r2, r2, #26
 8002612:	d430      	bmi.n	8002676 <_printf_common+0xba>
 8002614:	4641      	mov	r1, r8
 8002616:	4638      	mov	r0, r7
 8002618:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800261c:	47c8      	blx	r9
 800261e:	3001      	adds	r0, #1
 8002620:	d023      	beq.n	800266a <_printf_common+0xae>
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	6922      	ldr	r2, [r4, #16]
 8002626:	f003 0306 	and.w	r3, r3, #6
 800262a:	2b04      	cmp	r3, #4
 800262c:	bf14      	ite	ne
 800262e:	2500      	movne	r5, #0
 8002630:	6833      	ldreq	r3, [r6, #0]
 8002632:	f04f 0600 	mov.w	r6, #0
 8002636:	bf08      	it	eq
 8002638:	68e5      	ldreq	r5, [r4, #12]
 800263a:	f104 041a 	add.w	r4, r4, #26
 800263e:	bf08      	it	eq
 8002640:	1aed      	subeq	r5, r5, r3
 8002642:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002646:	bf08      	it	eq
 8002648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800264c:	4293      	cmp	r3, r2
 800264e:	bfc4      	itt	gt
 8002650:	1a9b      	subgt	r3, r3, r2
 8002652:	18ed      	addgt	r5, r5, r3
 8002654:	42b5      	cmp	r5, r6
 8002656:	d11a      	bne.n	800268e <_printf_common+0xd2>
 8002658:	2000      	movs	r0, #0
 800265a:	e008      	b.n	800266e <_printf_common+0xb2>
 800265c:	2301      	movs	r3, #1
 800265e:	4652      	mov	r2, sl
 8002660:	4641      	mov	r1, r8
 8002662:	4638      	mov	r0, r7
 8002664:	47c8      	blx	r9
 8002666:	3001      	adds	r0, #1
 8002668:	d103      	bne.n	8002672 <_printf_common+0xb6>
 800266a:	f04f 30ff 	mov.w	r0, #4294967295
 800266e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002672:	3501      	adds	r5, #1
 8002674:	e7c1      	b.n	80025fa <_printf_common+0x3e>
 8002676:	2030      	movs	r0, #48	@ 0x30
 8002678:	18e1      	adds	r1, r4, r3
 800267a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002684:	4422      	add	r2, r4
 8002686:	3302      	adds	r3, #2
 8002688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800268c:	e7c2      	b.n	8002614 <_printf_common+0x58>
 800268e:	2301      	movs	r3, #1
 8002690:	4622      	mov	r2, r4
 8002692:	4641      	mov	r1, r8
 8002694:	4638      	mov	r0, r7
 8002696:	47c8      	blx	r9
 8002698:	3001      	adds	r0, #1
 800269a:	d0e6      	beq.n	800266a <_printf_common+0xae>
 800269c:	3601      	adds	r6, #1
 800269e:	e7d9      	b.n	8002654 <_printf_common+0x98>

080026a0 <_printf_i>:
 80026a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026a4:	7e0f      	ldrb	r7, [r1, #24]
 80026a6:	4691      	mov	r9, r2
 80026a8:	2f78      	cmp	r7, #120	@ 0x78
 80026aa:	4680      	mov	r8, r0
 80026ac:	460c      	mov	r4, r1
 80026ae:	469a      	mov	sl, r3
 80026b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80026b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80026b6:	d807      	bhi.n	80026c8 <_printf_i+0x28>
 80026b8:	2f62      	cmp	r7, #98	@ 0x62
 80026ba:	d80a      	bhi.n	80026d2 <_printf_i+0x32>
 80026bc:	2f00      	cmp	r7, #0
 80026be:	f000 80d1 	beq.w	8002864 <_printf_i+0x1c4>
 80026c2:	2f58      	cmp	r7, #88	@ 0x58
 80026c4:	f000 80b8 	beq.w	8002838 <_printf_i+0x198>
 80026c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80026cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80026d0:	e03a      	b.n	8002748 <_printf_i+0xa8>
 80026d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80026d6:	2b15      	cmp	r3, #21
 80026d8:	d8f6      	bhi.n	80026c8 <_printf_i+0x28>
 80026da:	a101      	add	r1, pc, #4	@ (adr r1, 80026e0 <_printf_i+0x40>)
 80026dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026e0:	08002739 	.word	0x08002739
 80026e4:	0800274d 	.word	0x0800274d
 80026e8:	080026c9 	.word	0x080026c9
 80026ec:	080026c9 	.word	0x080026c9
 80026f0:	080026c9 	.word	0x080026c9
 80026f4:	080026c9 	.word	0x080026c9
 80026f8:	0800274d 	.word	0x0800274d
 80026fc:	080026c9 	.word	0x080026c9
 8002700:	080026c9 	.word	0x080026c9
 8002704:	080026c9 	.word	0x080026c9
 8002708:	080026c9 	.word	0x080026c9
 800270c:	0800284b 	.word	0x0800284b
 8002710:	08002777 	.word	0x08002777
 8002714:	08002805 	.word	0x08002805
 8002718:	080026c9 	.word	0x080026c9
 800271c:	080026c9 	.word	0x080026c9
 8002720:	0800286d 	.word	0x0800286d
 8002724:	080026c9 	.word	0x080026c9
 8002728:	08002777 	.word	0x08002777
 800272c:	080026c9 	.word	0x080026c9
 8002730:	080026c9 	.word	0x080026c9
 8002734:	0800280d 	.word	0x0800280d
 8002738:	6833      	ldr	r3, [r6, #0]
 800273a:	1d1a      	adds	r2, r3, #4
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6032      	str	r2, [r6, #0]
 8002740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002744:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002748:	2301      	movs	r3, #1
 800274a:	e09c      	b.n	8002886 <_printf_i+0x1e6>
 800274c:	6833      	ldr	r3, [r6, #0]
 800274e:	6820      	ldr	r0, [r4, #0]
 8002750:	1d19      	adds	r1, r3, #4
 8002752:	6031      	str	r1, [r6, #0]
 8002754:	0606      	lsls	r6, r0, #24
 8002756:	d501      	bpl.n	800275c <_printf_i+0xbc>
 8002758:	681d      	ldr	r5, [r3, #0]
 800275a:	e003      	b.n	8002764 <_printf_i+0xc4>
 800275c:	0645      	lsls	r5, r0, #25
 800275e:	d5fb      	bpl.n	8002758 <_printf_i+0xb8>
 8002760:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002764:	2d00      	cmp	r5, #0
 8002766:	da03      	bge.n	8002770 <_printf_i+0xd0>
 8002768:	232d      	movs	r3, #45	@ 0x2d
 800276a:	426d      	negs	r5, r5
 800276c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002770:	230a      	movs	r3, #10
 8002772:	4858      	ldr	r0, [pc, #352]	@ (80028d4 <_printf_i+0x234>)
 8002774:	e011      	b.n	800279a <_printf_i+0xfa>
 8002776:	6821      	ldr	r1, [r4, #0]
 8002778:	6833      	ldr	r3, [r6, #0]
 800277a:	0608      	lsls	r0, r1, #24
 800277c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002780:	d402      	bmi.n	8002788 <_printf_i+0xe8>
 8002782:	0649      	lsls	r1, r1, #25
 8002784:	bf48      	it	mi
 8002786:	b2ad      	uxthmi	r5, r5
 8002788:	2f6f      	cmp	r7, #111	@ 0x6f
 800278a:	6033      	str	r3, [r6, #0]
 800278c:	bf14      	ite	ne
 800278e:	230a      	movne	r3, #10
 8002790:	2308      	moveq	r3, #8
 8002792:	4850      	ldr	r0, [pc, #320]	@ (80028d4 <_printf_i+0x234>)
 8002794:	2100      	movs	r1, #0
 8002796:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800279a:	6866      	ldr	r6, [r4, #4]
 800279c:	2e00      	cmp	r6, #0
 800279e:	60a6      	str	r6, [r4, #8]
 80027a0:	db05      	blt.n	80027ae <_printf_i+0x10e>
 80027a2:	6821      	ldr	r1, [r4, #0]
 80027a4:	432e      	orrs	r6, r5
 80027a6:	f021 0104 	bic.w	r1, r1, #4
 80027aa:	6021      	str	r1, [r4, #0]
 80027ac:	d04b      	beq.n	8002846 <_printf_i+0x1a6>
 80027ae:	4616      	mov	r6, r2
 80027b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80027b4:	fb03 5711 	mls	r7, r3, r1, r5
 80027b8:	5dc7      	ldrb	r7, [r0, r7]
 80027ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80027be:	462f      	mov	r7, r5
 80027c0:	42bb      	cmp	r3, r7
 80027c2:	460d      	mov	r5, r1
 80027c4:	d9f4      	bls.n	80027b0 <_printf_i+0x110>
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d10b      	bne.n	80027e2 <_printf_i+0x142>
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	07df      	lsls	r7, r3, #31
 80027ce:	d508      	bpl.n	80027e2 <_printf_i+0x142>
 80027d0:	6923      	ldr	r3, [r4, #16]
 80027d2:	6861      	ldr	r1, [r4, #4]
 80027d4:	4299      	cmp	r1, r3
 80027d6:	bfde      	ittt	le
 80027d8:	2330      	movle	r3, #48	@ 0x30
 80027da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80027de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80027e2:	1b92      	subs	r2, r2, r6
 80027e4:	6122      	str	r2, [r4, #16]
 80027e6:	464b      	mov	r3, r9
 80027e8:	4621      	mov	r1, r4
 80027ea:	4640      	mov	r0, r8
 80027ec:	f8cd a000 	str.w	sl, [sp]
 80027f0:	aa03      	add	r2, sp, #12
 80027f2:	f7ff fee3 	bl	80025bc <_printf_common>
 80027f6:	3001      	adds	r0, #1
 80027f8:	d14a      	bne.n	8002890 <_printf_i+0x1f0>
 80027fa:	f04f 30ff 	mov.w	r0, #4294967295
 80027fe:	b004      	add	sp, #16
 8002800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	f043 0320 	orr.w	r3, r3, #32
 800280a:	6023      	str	r3, [r4, #0]
 800280c:	2778      	movs	r7, #120	@ 0x78
 800280e:	4832      	ldr	r0, [pc, #200]	@ (80028d8 <_printf_i+0x238>)
 8002810:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	6831      	ldr	r1, [r6, #0]
 8002818:	061f      	lsls	r7, r3, #24
 800281a:	f851 5b04 	ldr.w	r5, [r1], #4
 800281e:	d402      	bmi.n	8002826 <_printf_i+0x186>
 8002820:	065f      	lsls	r7, r3, #25
 8002822:	bf48      	it	mi
 8002824:	b2ad      	uxthmi	r5, r5
 8002826:	6031      	str	r1, [r6, #0]
 8002828:	07d9      	lsls	r1, r3, #31
 800282a:	bf44      	itt	mi
 800282c:	f043 0320 	orrmi.w	r3, r3, #32
 8002830:	6023      	strmi	r3, [r4, #0]
 8002832:	b11d      	cbz	r5, 800283c <_printf_i+0x19c>
 8002834:	2310      	movs	r3, #16
 8002836:	e7ad      	b.n	8002794 <_printf_i+0xf4>
 8002838:	4826      	ldr	r0, [pc, #152]	@ (80028d4 <_printf_i+0x234>)
 800283a:	e7e9      	b.n	8002810 <_printf_i+0x170>
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	f023 0320 	bic.w	r3, r3, #32
 8002842:	6023      	str	r3, [r4, #0]
 8002844:	e7f6      	b.n	8002834 <_printf_i+0x194>
 8002846:	4616      	mov	r6, r2
 8002848:	e7bd      	b.n	80027c6 <_printf_i+0x126>
 800284a:	6833      	ldr	r3, [r6, #0]
 800284c:	6825      	ldr	r5, [r4, #0]
 800284e:	1d18      	adds	r0, r3, #4
 8002850:	6961      	ldr	r1, [r4, #20]
 8002852:	6030      	str	r0, [r6, #0]
 8002854:	062e      	lsls	r6, r5, #24
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	d501      	bpl.n	800285e <_printf_i+0x1be>
 800285a:	6019      	str	r1, [r3, #0]
 800285c:	e002      	b.n	8002864 <_printf_i+0x1c4>
 800285e:	0668      	lsls	r0, r5, #25
 8002860:	d5fb      	bpl.n	800285a <_printf_i+0x1ba>
 8002862:	8019      	strh	r1, [r3, #0]
 8002864:	2300      	movs	r3, #0
 8002866:	4616      	mov	r6, r2
 8002868:	6123      	str	r3, [r4, #16]
 800286a:	e7bc      	b.n	80027e6 <_printf_i+0x146>
 800286c:	6833      	ldr	r3, [r6, #0]
 800286e:	2100      	movs	r1, #0
 8002870:	1d1a      	adds	r2, r3, #4
 8002872:	6032      	str	r2, [r6, #0]
 8002874:	681e      	ldr	r6, [r3, #0]
 8002876:	6862      	ldr	r2, [r4, #4]
 8002878:	4630      	mov	r0, r6
 800287a:	f000 f859 	bl	8002930 <memchr>
 800287e:	b108      	cbz	r0, 8002884 <_printf_i+0x1e4>
 8002880:	1b80      	subs	r0, r0, r6
 8002882:	6060      	str	r0, [r4, #4]
 8002884:	6863      	ldr	r3, [r4, #4]
 8002886:	6123      	str	r3, [r4, #16]
 8002888:	2300      	movs	r3, #0
 800288a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800288e:	e7aa      	b.n	80027e6 <_printf_i+0x146>
 8002890:	4632      	mov	r2, r6
 8002892:	4649      	mov	r1, r9
 8002894:	4640      	mov	r0, r8
 8002896:	6923      	ldr	r3, [r4, #16]
 8002898:	47d0      	blx	sl
 800289a:	3001      	adds	r0, #1
 800289c:	d0ad      	beq.n	80027fa <_printf_i+0x15a>
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	079b      	lsls	r3, r3, #30
 80028a2:	d413      	bmi.n	80028cc <_printf_i+0x22c>
 80028a4:	68e0      	ldr	r0, [r4, #12]
 80028a6:	9b03      	ldr	r3, [sp, #12]
 80028a8:	4298      	cmp	r0, r3
 80028aa:	bfb8      	it	lt
 80028ac:	4618      	movlt	r0, r3
 80028ae:	e7a6      	b.n	80027fe <_printf_i+0x15e>
 80028b0:	2301      	movs	r3, #1
 80028b2:	4632      	mov	r2, r6
 80028b4:	4649      	mov	r1, r9
 80028b6:	4640      	mov	r0, r8
 80028b8:	47d0      	blx	sl
 80028ba:	3001      	adds	r0, #1
 80028bc:	d09d      	beq.n	80027fa <_printf_i+0x15a>
 80028be:	3501      	adds	r5, #1
 80028c0:	68e3      	ldr	r3, [r4, #12]
 80028c2:	9903      	ldr	r1, [sp, #12]
 80028c4:	1a5b      	subs	r3, r3, r1
 80028c6:	42ab      	cmp	r3, r5
 80028c8:	dcf2      	bgt.n	80028b0 <_printf_i+0x210>
 80028ca:	e7eb      	b.n	80028a4 <_printf_i+0x204>
 80028cc:	2500      	movs	r5, #0
 80028ce:	f104 0619 	add.w	r6, r4, #25
 80028d2:	e7f5      	b.n	80028c0 <_printf_i+0x220>
 80028d4:	08002a2d 	.word	0x08002a2d
 80028d8:	08002a3e 	.word	0x08002a3e

080028dc <memmove>:
 80028dc:	4288      	cmp	r0, r1
 80028de:	b510      	push	{r4, lr}
 80028e0:	eb01 0402 	add.w	r4, r1, r2
 80028e4:	d902      	bls.n	80028ec <memmove+0x10>
 80028e6:	4284      	cmp	r4, r0
 80028e8:	4623      	mov	r3, r4
 80028ea:	d807      	bhi.n	80028fc <memmove+0x20>
 80028ec:	1e43      	subs	r3, r0, #1
 80028ee:	42a1      	cmp	r1, r4
 80028f0:	d008      	beq.n	8002904 <memmove+0x28>
 80028f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80028fa:	e7f8      	b.n	80028ee <memmove+0x12>
 80028fc:	4601      	mov	r1, r0
 80028fe:	4402      	add	r2, r0
 8002900:	428a      	cmp	r2, r1
 8002902:	d100      	bne.n	8002906 <memmove+0x2a>
 8002904:	bd10      	pop	{r4, pc}
 8002906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800290a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800290e:	e7f7      	b.n	8002900 <memmove+0x24>

08002910 <_sbrk_r>:
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	2300      	movs	r3, #0
 8002914:	4d05      	ldr	r5, [pc, #20]	@ (800292c <_sbrk_r+0x1c>)
 8002916:	4604      	mov	r4, r0
 8002918:	4608      	mov	r0, r1
 800291a:	602b      	str	r3, [r5, #0]
 800291c:	f7fd fd30 	bl	8000380 <_sbrk>
 8002920:	1c43      	adds	r3, r0, #1
 8002922:	d102      	bne.n	800292a <_sbrk_r+0x1a>
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	b103      	cbz	r3, 800292a <_sbrk_r+0x1a>
 8002928:	6023      	str	r3, [r4, #0]
 800292a:	bd38      	pop	{r3, r4, r5, pc}
 800292c:	20000204 	.word	0x20000204

08002930 <memchr>:
 8002930:	4603      	mov	r3, r0
 8002932:	b510      	push	{r4, lr}
 8002934:	b2c9      	uxtb	r1, r1
 8002936:	4402      	add	r2, r0
 8002938:	4293      	cmp	r3, r2
 800293a:	4618      	mov	r0, r3
 800293c:	d101      	bne.n	8002942 <memchr+0x12>
 800293e:	2000      	movs	r0, #0
 8002940:	e003      	b.n	800294a <memchr+0x1a>
 8002942:	7804      	ldrb	r4, [r0, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	428c      	cmp	r4, r1
 8002948:	d1f6      	bne.n	8002938 <memchr+0x8>
 800294a:	bd10      	pop	{r4, pc}

0800294c <memcpy>:
 800294c:	440a      	add	r2, r1
 800294e:	4291      	cmp	r1, r2
 8002950:	f100 33ff 	add.w	r3, r0, #4294967295
 8002954:	d100      	bne.n	8002958 <memcpy+0xc>
 8002956:	4770      	bx	lr
 8002958:	b510      	push	{r4, lr}
 800295a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800295e:	4291      	cmp	r1, r2
 8002960:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002964:	d1f9      	bne.n	800295a <memcpy+0xe>
 8002966:	bd10      	pop	{r4, pc}

08002968 <_realloc_r>:
 8002968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800296c:	4607      	mov	r7, r0
 800296e:	4614      	mov	r4, r2
 8002970:	460d      	mov	r5, r1
 8002972:	b921      	cbnz	r1, 800297e <_realloc_r+0x16>
 8002974:	4611      	mov	r1, r2
 8002976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800297a:	f7ff bc3b 	b.w	80021f4 <_malloc_r>
 800297e:	b92a      	cbnz	r2, 800298c <_realloc_r+0x24>
 8002980:	f7ff fbce 	bl	8002120 <_free_r>
 8002984:	4625      	mov	r5, r4
 8002986:	4628      	mov	r0, r5
 8002988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800298c:	f000 f81a 	bl	80029c4 <_malloc_usable_size_r>
 8002990:	4284      	cmp	r4, r0
 8002992:	4606      	mov	r6, r0
 8002994:	d802      	bhi.n	800299c <_realloc_r+0x34>
 8002996:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800299a:	d8f4      	bhi.n	8002986 <_realloc_r+0x1e>
 800299c:	4621      	mov	r1, r4
 800299e:	4638      	mov	r0, r7
 80029a0:	f7ff fc28 	bl	80021f4 <_malloc_r>
 80029a4:	4680      	mov	r8, r0
 80029a6:	b908      	cbnz	r0, 80029ac <_realloc_r+0x44>
 80029a8:	4645      	mov	r5, r8
 80029aa:	e7ec      	b.n	8002986 <_realloc_r+0x1e>
 80029ac:	42b4      	cmp	r4, r6
 80029ae:	4622      	mov	r2, r4
 80029b0:	4629      	mov	r1, r5
 80029b2:	bf28      	it	cs
 80029b4:	4632      	movcs	r2, r6
 80029b6:	f7ff ffc9 	bl	800294c <memcpy>
 80029ba:	4629      	mov	r1, r5
 80029bc:	4638      	mov	r0, r7
 80029be:	f7ff fbaf 	bl	8002120 <_free_r>
 80029c2:	e7f1      	b.n	80029a8 <_realloc_r+0x40>

080029c4 <_malloc_usable_size_r>:
 80029c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029c8:	1f18      	subs	r0, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	bfbc      	itt	lt
 80029ce:	580b      	ldrlt	r3, [r1, r0]
 80029d0:	18c0      	addlt	r0, r0, r3
 80029d2:	4770      	bx	lr

080029d4 <_init>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	bf00      	nop
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr

080029e0 <_fini>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	bf00      	nop
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr
